{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatApp.jsx\";\n// import React, { Component } from 'react';\n// import Talk from 'talkjs';\n// export default class ChatApp extends Component {\n//     constructor (props){\n//         super (props);\n//         this.inbox=undefined;\n//     }\n//     componentDidMount() {\n//         // Promise can be `then`ed multiple times\n//         Talk.ready\n//             .then(() => {\n//                 const me = new Talk.User({\n//                     id: `${this.props.userInSession._id}`,\n//                     name: `${this.props.userInSession.username}`,\n//                     photoUrl: `${this.props.userInSession.profilePicUrl}`,\n//                     welcomeMessage: \"Hey there! How are you? :-)\"\n//                 });\n//                 if (!window.talkSession) {\n//                     window.talkSession = new Talk.Session({\n//                         appId: \"txjMxHYM\",\n//                         me: me\n//                     });\n//                 }\n//                 const other = new Talk.User({\n//                     id: `${this.props.location.chatPartner.user._id}`,\n//                     name: `${this.props.location.chatPartner.user.username}`,\n//                     photoUrl: `${this.props.location.chatPartner.user.profilePicUrl}`,\n//                     welcomeMessage: \"Hey there! Love to chat :-)\"\n//                 });\n//                 // You control the ID of a conversation. oneOnOneId is a helper method that generates\n//                 // a unique conversation ID for a given pair of users. \n//                 const conversationId = Talk.oneOnOneId(me, other);\n//                 const conversation = window.talkSession.getOrCreateConversation(conversationId);\n//                 conversation.setParticipant(me);\n//                 conversation.setParticipant(other);\n//                 this.inbox = window.talkSession.createInbox({\n//                     selected: conversation\n//                 });\n//                 this.inbox.mount(this.container);\n//             })\n//             .catch(e => console.error(e));\n//     }\n//     componentWillUnmount() {\n//         if (this.inbox) {\n//             this.inbox.destroy();\n//         }\n//     }\n//     render() {\n//         return ( \n//             < span >\n//             <div style = {{ height: '100vh' }} ref = { c => this.container = c }> Loading... \n//             </div> \n//             </span > );\n//     }\n// }\nimport React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport axios from 'axios';\nexport default class ChatApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      chatPartner: this.props.location.chatPartner.user,\n      currentRoom: {\n        users: []\n      },\n      messages: [],\n      users: []\n    };\n    this.addMessage = this.addMessage.bind(this);\n  }\n\n  componentDidMount() {\n    debugger;\n    axios.get(\"\".concat(process.env.REACT_APP_API, \"/newChat\"), {\n      withCredentials: true\n    }).then(response => {\n      let chatRooms = response.data;\n      debugger;\n      let existRoom = \"\";\n\n      for (var i = 0; i < chatRooms.length; i++) {\n        let usersInRoom = chatRooms[i][\"member_user_ids\"];\n\n        for (var j = 0; j < usersInRoom.length; j++) {\n          debugger;\n\n          if (usersInRoom[j] === this.state.chatPartner._id) {\n            existRoom = chatRooms[i].id;\n            debugger;\n            break;\n          }\n        }\n      }\n\n      const chatManager = new ChatManager({\n        instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n        userId: this.props.userInSession._id,\n        tokenProvider: new TokenProvider({\n          url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token\"\n        })\n      });\n\n      if (existRoom) {\n        debugger;\n        chatManager.connect().then(currentUser => {\n          this.setState({\n            currentUser: currentUser\n          });\n          currentUser.subscribeToRoom({\n            roomId: \"\".concat(existRoom),\n            messageLimit: 100,\n            hooks: {\n              onMessage: message => {\n                this.setState({\n                  messages: [...this.state.messages, message]\n                });\n              }\n            }\n          }).then(currentRoom => {\n            console.log(currentRoom.userIds);\n            this.setState({\n              currentRoom,\n              users: currentRoom.userIds\n            });\n          }).catch(error => console.log(error));\n        });\n      } else {\n        chatManager.connect().then(currentUser => {\n          this.setState({\n            currentUser: currentUser\n          });\n          return currentUser.createRoom({\n            name: \"\".concat(this.props.location.chatPartner.user.username),\n            private: true,\n            addUserIds: [\"\".concat(this.state.chatPartner._id)],\n            customData: {\n              foo: 42\n            }\n          }).then(room => {\n            return currentUser.subscribeToRoom({\n              roomId: \"\".concat(room.id),\n              messageLimit: 100,\n              hooks: {\n                onMessage: message => {\n                  this.setState({\n                    messages: [...this.state.messages, message]\n                  });\n                }\n              }\n            }).then(currentRoom => {\n              console.log(currentRoom.userIds);\n              this.setState({\n                currentRoom,\n                users: currentRoom.userIds\n              });\n            }).catch(error => console.log(error));\n          });\n        });\n      } // this.setState({chatRooms:chatRooms})\n\n    });\n  }\n\n  addMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id\n    }).catch(error => console.error('error', error));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(MessageList, Object.assign({\n      messages: this.state.messages\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })), React.createElement(Input, {\n      className: \"input-field\",\n      onSubmit: this.addMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatApp.jsx"],"names":["React","Component","ChatManager","TokenProvider","MessageList","Input","axios","ChatApp","constructor","props","state","currentUser","chatPartner","location","user","currentRoom","users","messages","addMessage","bind","componentDidMount","get","process","env","REACT_APP_API","withCredentials","then","response","chatRooms","data","existRoom","i","length","usersInRoom","j","_id","id","chatManager","instanceLocator","REACT_APP_chatkit_instance_locator","userId","userInSession","tokenProvider","url","connect","setState","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","console","log","userIds","catch","error","createRoom","name","username","private","addUserIds","customData","foo","room","text","sendMessage","render"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react';\n// import Talk from 'talkjs';\n\n// export default class ChatApp extends Component {\n//     constructor (props){\n//         super (props);\n//         this.inbox=undefined;\n//     }\n//     componentDidMount() {\n//         // Promise can be `then`ed multiple times\n//         Talk.ready\n//             .then(() => {\n//                 const me = new Talk.User({\n//                     id: `${this.props.userInSession._id}`,\n//                     name: `${this.props.userInSession.username}`,\n//                     photoUrl: `${this.props.userInSession.profilePicUrl}`,\n//                     welcomeMessage: \"Hey there! How are you? :-)\"\n//                 });\n\n//                 if (!window.talkSession) {\n//                     window.talkSession = new Talk.Session({\n//                         appId: \"txjMxHYM\",\n//                         me: me\n//                     });\n//                 }\n\n//                 const other = new Talk.User({\n//                     id: `${this.props.location.chatPartner.user._id}`,\n//                     name: `${this.props.location.chatPartner.user.username}`,\n//                     photoUrl: `${this.props.location.chatPartner.user.profilePicUrl}`,\n//                     welcomeMessage: \"Hey there! Love to chat :-)\"\n//                 });\n\n//                 // You control the ID of a conversation. oneOnOneId is a helper method that generates\n//                 // a unique conversation ID for a given pair of users. \n//                 const conversationId = Talk.oneOnOneId(me, other);\n\n//                 const conversation = window.talkSession.getOrCreateConversation(conversationId);\n//                 conversation.setParticipant(me);\n//                 conversation.setParticipant(other);\n\n//                 this.inbox = window.talkSession.createInbox({\n//                     selected: conversation\n//                 });\n//                 this.inbox.mount(this.container);\n\n//             })\n//             .catch(e => console.error(e));\n//     }\n\n//     componentWillUnmount() {\n//         if (this.inbox) {\n//             this.inbox.destroy();\n//         }\n//     }\n\n//     render() {\n//         return ( \n//             < span >\n//             <div style = {{ height: '100vh' }} ref = { c => this.container = c }> Loading... \n//             </div> \n//             </span > );\n//     }\n// }\n\n\n\n\nimport React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport axios from 'axios';\n\nexport default class ChatApp extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            currentUser:null,\n            chatPartner: this.props.location.chatPartner.user,\n            currentRoom: {users:[]},\n            messages:[],\n            users:[]\n        }\n        this.addMessage = this.addMessage.bind(this);\n    }\n\n    componentDidMount (){\n        debugger\n        axios.get(`${process.env.REACT_APP_API}/newChat`, \n        {withCredentials:true})\n        .then(response => {\n            let chatRooms= response.data;\n            debugger\n            let existRoom=\"\";\n            for (var i=0; i<chatRooms.length; i++){\n                let usersInRoom = chatRooms[i][\"member_user_ids\"]\n                for (var j=0; j<usersInRoom.length; j++){\n                    debugger\n                    if (usersInRoom[j]===this.state.chatPartner._id){\n                        existRoom= chatRooms[i].id\n                        debugger\n                        break;\n                    }\n                }\n            }\n\n            const chatManager = new ChatManager({\n                instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n                userId: this.props.userInSession._id,\n                tokenProvider: new TokenProvider({\n                    url:`https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token`\n                })\n                })\n\n            if (existRoom){\n                debugger\n                chatManager\n                    .connect()\n                    .then(currentUser => {\n                        this.setState({\n                            currentUser:currentUser\n                        })\n                        currentUser.subscribeToRoom({\n                            roomId: `${existRoom}`,\n                            messageLimit: 100,\n                            hooks: {\n                                onMessage: message => {\n                                    this.setState({\n                                        messages: [...this.state.messages, message]\n                                    })\n                                },\n                            }})\n                            .then(currentRoom => {\n                            console.log(currentRoom.userIds);\n                            this.setState({\n                                currentRoom,\n                                users: currentRoom.userIds\n                            })\n                            })\n                            .catch(error => console.log(error))\n            })} else {\n                chatManager\n                .connect()\n                .then(currentUser => {\n                    this.setState({\n                        currentUser:currentUser\n                    })\n\n                    return currentUser.createRoom({\n                        name: `${this.props.location.chatPartner.user.username}`,\n                        private: true,\n                        addUserIds: [ `${this.state.chatPartner._id}`],\n                        customData: { foo: 42 },\n                    })\n                    .then(room => {\n                        return currentUser.subscribeToRoom({\n                            roomId: `${room.id}`,\n                            messageLimit: 100,\n                            hooks: {\n                                onMessage: message => {\n                                    this.setState({\n                                        messages: [...this.state.messages, message]\n                                    })\n                                },\n                            }})\n                            .then(currentRoom => {\n                            console.log(currentRoom.userIds);\n                            this.setState({\n                                currentRoom,\n                                users: currentRoom.userIds\n                            })\n                            })\n                            .catch(error => console.log(error))\n            })})\n         }\n                \n            // this.setState({chatRooms:chatRooms})\n        })\n    }\n    \n    addMessage(text) {\n        this.state.currentUser.sendMessage({\n            text,\n            roomId: this.state.currentRoom.id\n        })\n        .catch(error => console.error('error', error));\n    }\n\n    render() {\n        return (\n            <>\n                <MessageList messages={this.state.messages} {...this.props}/>\n                <Input className=\"input-field\" onSubmit={this.addMessage} />\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}