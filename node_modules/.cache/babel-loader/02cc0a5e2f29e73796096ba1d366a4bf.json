{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatRoom.jsx\";\nimport React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit';\nexport default class ChatRoom extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentScreen: \"UserScreen\",\n      currentUsername: this.props.userInSession.username,\n      messages: []\n    };\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.props.userInSession.username,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: \"\".concat(process.env.REACT_APP_API, \"/authenticate\")\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      currentUser.createRoom({\n        name: 'General',\n        private: true,\n        addUserIds: ['craig', 'kate'],\n        customData: {\n          foo: 42\n        }\n      }).then(room => {\n        currentUser.subcribeToRoom({\n          roomId: room.id\n        }); // console.log(`Created room called ${room.name}`)\n      }).catch(err => {\n        console.log(\"Error creating room \".concat(err));\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatRoom.jsx"],"names":["React","Component","Chatkit","ChatRoom","constructor","state","currentScreen","currentUsername","props","userInSession","username","messages","componentDidMount","chatManager","ChatManager","instanceLocator","process","env","REACT_APP_chatkit_instance_locator","userId","tokenProvider","TokenProvider","url","REACT_APP_API","connect","then","currentUser","createRoom","name","private","addUserIds","customData","foo","room","subcribeToRoom","roomId","id","catch","err","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,eAAe,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC5CG,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,aAAa,EAAE,YADR;AAEPC,MAAAA,eAAe,EAAE,KAAKC,KAAL,CAAWC,aAAX,CAAyBC,QAFnC;AAGPC,MAAAA,QAAQ,EAAC;AAHF,KAAX;AAKH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,WAAW,GAAG,IAAIX,OAAO,CAACY,WAAZ,CAAwB;AACxCC,MAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,kCADW;AAExCC,MAAAA,MAAM,EAAE,KAAKX,KAAL,CAAWC,aAAX,CAAyBC,QAFO;AAGxCU,MAAAA,aAAa,EAAE,IAAIlB,OAAO,CAACmB,aAAZ,CAA0B;AACrCC,QAAAA,GAAG,YAAIN,OAAO,CAACC,GAAR,CAAYM,aAAhB;AADkC,OAA1B;AAHyB,KAAxB,CAApB;AAQAV,IAAAA,WAAW,CAACW,OAAZ,GACCC,IADD,CACOC,WAAW,IAAE;AAChBA,MAAAA,WAAW,CAACC,UAAZ,CAAuB;AACnBC,QAAAA,IAAI,EAAE,SADa;AAEnBC,QAAAA,OAAO,EAAE,IAFU;AAGnBC,QAAAA,UAAU,EAAE,CAAC,OAAD,EAAU,MAAV,CAHO;AAInBC,QAAAA,UAAU,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP;AAJO,OAAvB,EAKKP,IALL,CAKUQ,IAAI,IAAI;AACZP,QAAAA,WAAW,CAACQ,cAAZ,CAA2B;AACvBC,UAAAA,MAAM,EAACF,IAAI,CAACG;AADW,SAA3B,EADY,CAId;AACD,OAVH,EAWGC,KAXH,CAWSC,GAAG,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,+BAAmCF,GAAnC;AACD,OAbH;AAcH,KAhBD;AAkBH;;AACDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAKH;;AA3C2C","sourcesContent":["import React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit';\n\nexport default class ChatRoom extends Component {\n    constructor(){\n        super()\n        this.state={\n            currentScreen: \"UserScreen\",\n            currentUsername: this.props.userInSession.username,\n            messages:[]\n        }\n    }\n    componentDidMount (){\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n            userId: this.props.userInSession.username,\n            tokenProvider: new Chatkit.TokenProvider({\n                url:`${process.env.REACT_APP_API}/authenticate`\n            })\n        })\n\n        chatManager.connect()\n        .then( currentUser=>{\n            currentUser.createRoom({\n                name: 'General',\n                private: true,\n                addUserIds: ['craig', 'kate'],\n                customData: { foo: 42 },\n              }).then(room => {\n                  currentUser.subcribeToRoom({\n                      roomId:room.id\n                  })\n                // console.log(`Created room called ${room.name}`)\n              })\n              .catch(err => {\n                console.log(`Error creating room ${err}`)\n              })\n        })\n        \n    }\n    render() {\n        return (\n            <div>\n                \n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}