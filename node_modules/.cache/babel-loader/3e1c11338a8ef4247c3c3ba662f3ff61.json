{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatApp.jsx\";\nimport React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nexport default class ChatApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      chatPartner: this.props.location.chatPartner.user.username,\n      currentRoom: {\n        users: []\n      },\n      messages: [],\n      users: []\n    };\n    this.addMessage = this.addMessage.bind(this);\n  }\n\n  componentDidMount() {\n    const chatManager = new ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.props.userInSession.username,\n      tokenProvider: new TokenProvider({\n        url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token\"\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      this.setState({\n        currentUser: currentUser\n      });\n      return currentUser.createRoom({\n        id: \"\".concat(this.props.userInSession._id, \"_\").concat(this.props.location.chatPartner.user._id),\n        name: \"\".concat(this.props.userInSession.username, \"_\").concat(this.props.location.chatPartner.user.username),\n        private: true,\n        addUserIds: [\"\".concat(this.props.userInSession.username), \"\".concat(this.state.chatPartner)],\n        customData: {\n          foo: 42\n        }\n      }).then(room => {\n        return currentUser.subscribeToRoom({\n          roomId: \"\".concat(room.id),\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n            }\n          }\n        }).then(currentRoom => {\n          console.log(currentRoom.userIds);\n          this.setState({\n            currentRoom,\n            users: currentRoom.userIds\n          });\n        }).catch(error => console.log(error));\n      });\n    });\n  }\n\n  addMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id\n    }).catch(error => console.error('error', error));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(MessageList, Object.assign({\n      messages: this.state.messages\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(Input, {\n      className: \"input-field\",\n      onSubmit: this.addMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatApp.jsx"],"names":["React","Component","ChatManager","TokenProvider","MessageList","Input","ChatApp","constructor","props","state","currentUser","chatPartner","location","user","username","currentRoom","users","messages","addMessage","bind","componentDidMount","chatManager","instanceLocator","process","env","REACT_APP_chatkit_instance_locator","userId","userInSession","tokenProvider","url","connect","then","setState","createRoom","id","_id","name","private","addUserIds","customData","foo","room","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","console","log","userIds","catch","error","text","sendMessage","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\n\nexport default class ChatApp extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            currentUser:null,\n            chatPartner: this.props.location.chatPartner.user.username,\n            currentRoom: {users:[]},\n            messages:[],\n            users:[]\n        }\n        this.addMessage = this.addMessage.bind(this);\n    }\n\n    componentDidMount (){\n        const chatManager = new ChatManager({\n            instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n            userId: this.props.userInSession.username,\n            tokenProvider: new TokenProvider({\n                url:`https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token`\n            })\n        })\n\n        chatManager\n                .connect()\n                .then(currentUser => {\n                    this.setState({\n                        currentUser:currentUser\n                    })\n\n                    return currentUser.createRoom({\n                        id: `${this.props.userInSession._id}_${this.props.location.chatPartner.user._id}`,\n                        name: `${this.props.userInSession.username}_${this.props.location.chatPartner.user.username}`,\n                        private: true,\n                        addUserIds: [`${this.props.userInSession.username}`, `${this.state.chatPartner}`],\n                        customData: { foo: 42 },\n                      })\n                      .then(room => {\n                        return currentUser.subscribeToRoom({\n                            roomId: `${room.id}`,\n                            messageLimit: 100,\n                            hooks: {\n                                onMessage: message => {\n                                    this.setState({\n                                        messages: [...this.state.messages, message]\n                                    })\n                                },\n                            }})\n                            .then(currentRoom => {\n                            console.log(currentRoom.userIds);\n                            this.setState({\n                                currentRoom,\n                                users: currentRoom.userIds\n                            })\n                            })\n                            .catch(error => console.log(error))\n                    })\n                })\n                \n    }\n    \n    addMessage(text) {\n        this.state.currentUser.sendMessage({\n            text,\n            roomId: this.state.currentRoom.id\n        })\n        .catch(error => console.error('error', error));\n    }\n\n    render() {\n        return (\n            <div>\n                <MessageList messages={this.state.messages} {...this.props}/>\n                <Input className=\"input-field\" onSubmit={this.addMessage} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}