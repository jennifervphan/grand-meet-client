{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatApp.jsx\";\nimport React, { Component } from 'react';\nimport Talk from 'talkjs';\nexport default class ChatApp extends Component {\n  constructor(props) {\n    super(props);\n    this.inbox = undefined;\n  }\n\n  componentDidMount() {\n    // Promise can be `then`ed multiple times\n    Talk.ready.then(() => {\n      const me = new Talk.User({\n        id: \"\".concat(this.props.userInSession._id),\n        name: \"\".concat(this.props.userInSession.username),\n        photoUrl: \"\".concat(this.props.userInSession.profilePicUrl),\n        welcomeMessage: \"Hey there! How are you? :-)\"\n      });\n\n      if (!window.talkSession) {\n        window.talkSession = new Talk.Session({\n          appId: \"txjMxHYM\",\n          me: me\n        });\n      }\n\n      const other = new Talk.User({\n        id: \"\".concat(this.props.location.chatPartner.user._id),\n        name: \"\".concat(this.props.location.chatPartner.user.username),\n        photoUrl: \"\".concat(this.props.location.chatPartner.user.profilePicUrl),\n        welcomeMessage: \"Hey there! Love to chat :-)\"\n      }); // You control the ID of a conversation. oneOnOneId is a helper method that generates\n      // a unique conversation ID for a given pair of users. \n\n      const conversationId = Talk.oneOnOneId(me, other);\n      const conversation = window.talkSession.getOrCreateConversation(conversationId);\n      conversation.setParticipant(me);\n      conversation.setParticipant(other);\n      this.inbox = window.talkSession.createInbox({\n        selected: conversation\n      });\n      this.inbox.mount(this.container);\n    }).catch(e => console.error(e));\n  }\n\n  componentWillUnmount() {\n    if (this.inbox) {\n      this.inbox.destroy();\n    }\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        height: '100vh'\n      },\n      ref: c => this.container = c,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \" Loading...\"));\n  }\n\n} // import React, { Component } from 'react';\n// import { ChatManager, TokenProvider } from '@pusher/chatkit-client';\n// import MessageList from './MessageList';\n// import Input from './Input';\n// export default class ChatApp extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state={\n//             currentUser:null,\n//             chatPartner: this.props.location.chatPartner.user,\n//             currentRoom: {users:[]},\n//             messages:[],\n//             users:[]\n//         }\n//         this.addMessage = this.addMessage.bind(this);\n//     }\n//     componentDidMount (){\n//         const chatManager = new ChatManager({\n//             instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n//             userId: this.props.userInSession.username,\n//             tokenProvider: new TokenProvider({\n//                 url:`https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token`\n//             })\n//         })\n//         chatManager\n//                 .connect()\n//                 .then(currentUser => {\n//                     this.setState({\n//                         currentUser:currentUser\n//                     })\n//                     return currentUser.createRoom({\n//                         name: `${this.props.userInSession.username}_${this.props.location.chatPartner.user.username}`,\n//                         private: true,\n//                         addUserIds: [ `${this.state.chatPartner.username}`],\n//                         customData: { foo: 42 },\n//                       })\n//                       .then(room => {\n//                         return currentUser.subscribeToRoom({\n//                             roomId: `${room.id}`,\n//                             messageLimit: 100,\n//                             hooks: {\n//                                 onMessage: message => {\n//                                     this.setState({\n//                                         messages: [...this.state.messages, message]\n//                                     })\n//                                 },\n//                             }})\n//                             .then(currentRoom => {\n//                             console.log(currentRoom.userIds);\n//                             this.setState({\n//                                 currentRoom,\n//                                 users: currentRoom.userIds\n//                             })\n//                             })\n//                             .catch(error => console.log(error))\n//                     })\n//                 })\n//     }\n//     addMessage(text) {\n//         this.state.currentUser.sendMessage({\n//             text,\n//             roomId: this.state.currentRoom.id\n//         })\n//         .catch(error => console.error('error', error));\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <MessageList messages={this.state.messages} {...this.props}/>\n//                 <Input className=\"input-field\" onSubmit={this.addMessage} />\n//             </div>\n//         )\n//     }\n// }","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatApp.jsx"],"names":["React","Component","Talk","ChatApp","constructor","props","inbox","undefined","componentDidMount","ready","then","me","User","id","userInSession","_id","name","username","photoUrl","profilePicUrl","welcomeMessage","window","talkSession","Session","appId","other","location","chatPartner","user","conversationId","oneOnOneId","conversation","getOrCreateConversation","setParticipant","createInbox","selected","mount","container","catch","e","console","error","componentWillUnmount","destroy","render","height","c"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Talk from 'talkjs';\n\nexport default class ChatApp extends Component {\n    constructor (props){\n        super (props);\n        this.inbox=undefined;\n    }\n    componentDidMount() {\n        // Promise can be `then`ed multiple times\n        Talk.ready\n            .then(() => {\n                const me = new Talk.User({\n                    id: `${this.props.userInSession._id}`,\n                    name: `${this.props.userInSession.username}`,\n                    photoUrl: `${this.props.userInSession.profilePicUrl}`,\n                    welcomeMessage: \"Hey there! How are you? :-)\"\n                });\n\n                if (!window.talkSession) {\n                    window.talkSession = new Talk.Session({\n                        appId: \"txjMxHYM\",\n                        me: me\n                    });\n                }\n\n                const other = new Talk.User({\n                    id: `${this.props.location.chatPartner.user._id}`,\n                    name: `${this.props.location.chatPartner.user.username}`,\n                    photoUrl: `${this.props.location.chatPartner.user.profilePicUrl}`,\n                    welcomeMessage: \"Hey there! Love to chat :-)\"\n                });\n\n                // You control the ID of a conversation. oneOnOneId is a helper method that generates\n                // a unique conversation ID for a given pair of users. \n                const conversationId = Talk.oneOnOneId(me, other);\n\n                const conversation = window.talkSession.getOrCreateConversation(conversationId);\n                conversation.setParticipant(me);\n                conversation.setParticipant(other);\n\n                this.inbox = window.talkSession.createInbox({\n                    selected: conversation\n                });\n                this.inbox.mount(this.container);\n\n            })\n            .catch(e => console.error(e));\n    }\n\n    componentWillUnmount() {\n        if (this.inbox) {\n            this.inbox.destroy();\n        }\n    }\n\n    render() {\n        return ( \n            < span >\n            <div style = {{ height: '100vh' }} ref = { c => this.container = c }> Loading... \n            </div> \n            </span > );\n    }\n}\n\n\n\n\n// import React, { Component } from 'react';\n// import { ChatManager, TokenProvider } from '@pusher/chatkit-client';\n// import MessageList from './MessageList';\n// import Input from './Input';\n\n// export default class ChatApp extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state={\n//             currentUser:null,\n//             chatPartner: this.props.location.chatPartner.user,\n//             currentRoom: {users:[]},\n//             messages:[],\n//             users:[]\n//         }\n//         this.addMessage = this.addMessage.bind(this);\n//     }\n\n//     componentDidMount (){\n//         const chatManager = new ChatManager({\n//             instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n//             userId: this.props.userInSession.username,\n//             tokenProvider: new TokenProvider({\n//                 url:`https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token`\n//             })\n//         })\n\n//         chatManager\n//                 .connect()\n//                 .then(currentUser => {\n//                     this.setState({\n//                         currentUser:currentUser\n//                     })\n\n//                     return currentUser.createRoom({\n//                         name: `${this.props.userInSession.username}_${this.props.location.chatPartner.user.username}`,\n//                         private: true,\n//                         addUserIds: [ `${this.state.chatPartner.username}`],\n//                         customData: { foo: 42 },\n//                       })\n//                       .then(room => {\n//                         return currentUser.subscribeToRoom({\n//                             roomId: `${room.id}`,\n//                             messageLimit: 100,\n//                             hooks: {\n//                                 onMessage: message => {\n//                                     this.setState({\n//                                         messages: [...this.state.messages, message]\n//                                     })\n//                                 },\n//                             }})\n//                             .then(currentRoom => {\n//                             console.log(currentRoom.userIds);\n//                             this.setState({\n//                                 currentRoom,\n//                                 users: currentRoom.userIds\n//                             })\n//                             })\n//                             .catch(error => console.log(error))\n//                     })\n//                 })\n                \n//     }\n    \n//     addMessage(text) {\n//         this.state.currentUser.sendMessage({\n//             text,\n//             roomId: this.state.currentRoom.id\n//         })\n//         .catch(error => console.error('error', error));\n//     }\n\n//     render() {\n//         return (\n//             <div>\n//                 <MessageList messages={this.state.messages} {...this.props}/>\n//                 <Input className=\"input-field\" onSubmit={this.addMessage} />\n//             </div>\n//         )\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}