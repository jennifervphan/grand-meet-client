{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/commonRoom/Games.jsx\";\nimport React from 'react';\nimport { TokenProvider, ChatManager } from '@pusher/chatkit-client';\nimport Rooms from './Rooms';\nimport Chat from './Chat';\nimport axios from 'axios';\nexport default class Games extends React.Component {\n  constructor(props) {\n    super(props);\n    debugger;\n    this.state = {\n      joined: [],\n      joinable: []\n    };\n  }\n\n  componentDidMount() {\n    const chatManager = new ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.props.username,\n      tokenProvider: new TokenProvider({\n        url: \"\".concat(process.env.REACT_APP_API, \"/authenticate\")\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      this.setState({\n        currentUser: currentUser\n      });\n      currentUser.getJoinableRooms().then(rooms => {\n        let lobby = rooms.find(room => room.name === 'Lobby');\n\n        if (lobby) {\n          currentUser.joinRoom({\n            roomId: lobby.id\n          });\n        } else {\n          lobby = currentUser.rooms.find(room => room.name === 'Lobby');\n        }\n\n        if (lobby) {\n          this.setState({\n            lobbyId: lobby.id,\n            activeRoom: lobby.id\n          });\n        }\n      });\n      setInterval(this._pollRooms.bind(this), 5000);\n\n      this._pollRooms();\n    }).catch(e => {\n      console.log('Failed to connect to Chatkit');\n      console.log(e);\n    });\n  }\n\n  _pollRooms() {\n    const currentUser = this.state.currentUser;\n    currentUser.getJoinableRooms().then(rooms => {\n      let filtered = rooms.filter(room => {\n        return room.private === false;\n      });\n      console.log(rooms);\n      console.log(currentUser.rooms);\n      let joinedfiltered = currentUser.rooms.filter(room => {\n        return room.isPrivate === false;\n      });\n      this.setState({\n        joined: joinedfiltered,\n        joinable: filtered\n      });\n    });\n  }\n\n  _enterRoom(id) {\n    debugger;\n    const currentUser = this.state.currentUser;\n    currentUser.joinRoom({\n      roomId: id\n    }).then(() => {\n      this.setState({\n        activeRoom: id\n      });\n\n      this._pollRooms();\n    }).catch(() => {\n      console.log('Failed to enter room');\n    });\n  }\n\n  _leaveRoom(id) {\n    const currentUser = this.state.currentUser;\n    currentUser.leaveRoom({\n      roomId: id\n    }).then(() => {\n      this._pollRooms();\n    }).catch(() => {\n      console.log('Failed to leave room');\n    });\n  }\n\n  _startedGame(roomId, white, black) {\n    axios.request({\n      url: \"\".concat(process.env.REACT_APP_API, \"/games\"),\n      method: 'POST',\n      data: {\n        room: roomId,\n        whitePlayer: white,\n        blackPlayer: black\n      }\n    }).then(response => {\n      this.setState({\n        activeRoom: roomId\n      });\n\n      this._pollRooms();\n    });\n  }\n\n  render() {\n    const currentUser = this.state.currentUser;\n    let chat;\n\n    if (currentUser) {\n      const room = currentUser.rooms.find(room => room.id === this.state.activeRoom);\n\n      if (room) {\n        const game = this.state.activeRoom !== this.state.lobbyId && this.state.activeRoom;\n        chat = React.createElement(Chat, {\n          user: currentUser,\n          room: room,\n          key: room.id,\n          startedGame: this._startedGame.bind(this),\n          game: game,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        });\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"rowFlex gamePage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"differentRooms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Rooms, {\n      joined: this.state.joined,\n      joinable: this.state.joinable,\n      activeRoom: this.state.activeRoom,\n      enterRoom: this._enterRoom.bind(this),\n      leaveRoom: this._leaveRoom.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"chatArea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, chat));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/commonRoom/Games.jsx"],"names":["React","TokenProvider","ChatManager","Rooms","Chat","axios","Games","Component","constructor","props","state","joined","joinable","componentDidMount","chatManager","instanceLocator","process","env","REACT_APP_chatkit_instance_locator","userId","username","tokenProvider","url","REACT_APP_API","connect","then","currentUser","setState","getJoinableRooms","rooms","lobby","find","room","name","joinRoom","roomId","id","lobbyId","activeRoom","setInterval","_pollRooms","bind","catch","e","console","log","filtered","filter","private","joinedfiltered","isPrivate","_enterRoom","_leaveRoom","leaveRoom","_startedGame","white","black","request","method","data","whitePlayer","blackPlayer","response","render","chat","game"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TokenProvider, ChatManager } from '@pusher/chatkit-client';\nimport Rooms from './Rooms';\nimport Chat from './Chat';\nimport axios from 'axios';\n\nexport default class Games extends React.Component {\n    constructor(props) {\n        super(props);\n        debugger\n        this.state = {\n        joined: [],\n        joinable: []\n    };\n    }\n\n    componentDidMount(){\n        const chatManager = new ChatManager({\n            instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n            userId: this.props.username,\n            tokenProvider: new TokenProvider({\n                url: `${process.env.REACT_APP_API}/authenticate`\n            })\n        });\n\n        chatManager\n        .connect()\n        .then(currentUser => {\n            this.setState({\n                currentUser: currentUser\n            });\n            currentUser.getJoinableRooms().then((rooms) => {\n                let lobby = rooms.find(room => room.name === 'Lobby');\n                if (lobby) {\n                    currentUser.joinRoom({ roomId: lobby.id });\n                } else {\n                    lobby = currentUser.rooms.find(room => room.name === 'Lobby');\n                }\n                if (lobby) {\n                    this.setState({\n                        lobbyId: lobby.id,\n                        activeRoom: lobby.id\n                    });\n                }\n            });\n            setInterval(this._pollRooms.bind(this), 5000);\n            this._pollRooms();\n        })\n        .catch((e) => {\n            console.log('Failed to connect to Chatkit');\n            console.log(e);\n        });\n    }\n\n    _pollRooms() {\n        const { currentUser } = this.state;\n        currentUser.getJoinableRooms()\n            .then((rooms) => {\n                let filtered = rooms.filter(room => {\n                    return room.private === false\n                })      \n                console.log(rooms)          \n                console.log(currentUser.rooms);\n                let joinedfiltered = currentUser.rooms.filter(room => {\n                    return room.isPrivate === false\n                })                \n                this.setState({\n                    joined: joinedfiltered,\n                    joinable: filtered\n                })\n            });\n    }\n    \n    _enterRoom(id) {\n        debugger\n        const { currentUser } = this.state;\n        currentUser.joinRoom({ roomId: id })\n            .then(() => {\n                this.setState({\n                    activeRoom: id\n                });\n                this._pollRooms();\n            })\n            .catch(() => {\n                console.log('Failed to enter room');\n            });\n    }\n\n    _leaveRoom(id) {\n        const { currentUser } = this.state;\n        currentUser.leaveRoom({ roomId: id })\n            .then(() => {\n                this._pollRooms();\n            })\n            .catch(() => {\n                console.log('Failed to leave room');\n            });\n    }\n\n    _startedGame(roomId, white, black) {\n        axios.request({\n            url: `${process.env.REACT_APP_API}/games`,\n            method: 'POST',\n            data: {\n                room: roomId,\n                whitePlayer: white,\n                blackPlayer: black\n            }\n        })\n        .then((response) => {\n            this.setState({\n                activeRoom: roomId\n            });\n            this._pollRooms();\n        });\n        }\n    \n    render() {\n        const { currentUser } = this.state;\n        let chat;\n        if (currentUser) {\n            const room = currentUser.rooms.find((room) => room.id === this.state.activeRoom);\n            if (room) {\n                const game = this.state.activeRoom !== this.state.lobbyId && this.state.activeRoom;\n                chat = <Chat user={currentUser} room={room} key={room.id} startedGame={this._startedGame.bind(this)} game={game} />\n            }\n        }\n        return (\n                <div className=\"rowFlex gamePage\">\n                    <div className=\"differentRooms\">\n                        <Rooms joined={this.state.joined}\n                                joinable={this.state.joinable}\n                                activeRoom={this.state.activeRoom}\n                                enterRoom={this._enterRoom.bind(this)}\n                                leaveRoom={this._leaveRoom.bind(this)} />\n                    </div>\n                    <div className=\"chatArea\">\n                        { chat }\n                    </div>\n                </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}