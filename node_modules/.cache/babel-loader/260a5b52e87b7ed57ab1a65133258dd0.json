{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/share/EachPost.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport default class EachPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}; // this.formatWrittenAt= this.formatWrittenAt.bind(this)\n  }\n\n  componentDidMount() {\n    const params = this.props.match.params;\n    debugger;\n    axios({\n      method: \"GET\",\n      baseURL: \"\".concat(process.env.REACT_APP_API, \"/post/\").concat(params.id),\n      withCredentials: true\n    }).then(response => {\n      console.log(response.data);\n      let now = new Date();\n      let changePost = response.data; // if (changePost.text[0].length > 100) {\n      //     changePost.short = []\n      //     changePost.short[0] = changePost.text[0].substring(0, 100) + \"...\"\n      // } else if (changePost.text.length > 1) {\n      //     changePost.short = []\n      //     changePost.short[0] = changePost.text[0]\n      //     changePost.short[1] = \"...\"\n      // }\n      // changePost.niceTime = this.formatWrittenAt(changePost.writtenAt, now);\n\n      this.setState({\n        post: changePost\n      });\n      console.log(changePost);\n    }).catch(err => {\n      console.log(err);\n    });\n  } // formatWrittenAt = (writtenAt, now)=> {\n  //     if (writtenAt.getDate() === now.getDate() &&\n  //         writtenAt.getMonth() === now.getMonth() &&\n  //         writtenAt.getFullYear() === now.getFullYear()) {\n  //         return \"today \" + (writtenAt.getHours() < 10 ? \"0\" + writtenAt.getHours().toString() : writtenAt.getHours().toString()) + \":\" +\n  //             (writtenAt.getMinutes() < 10 ? \"0\" + writtenAt.getMinutes().toString() : writtenAt.getMinutes().toString()) + \":\" +\n  //             (writtenAt.getSeconds() < 10 ? \"0\" + writtenAt.getSeconds().toString() : writtenAt.getSeconds().toString());\n  //     } else if (writtenAt.getMonth() === now.getMonth() &&\n  //         writtenAt.getFullYear() === now.getFullYear() &&\n  //         writtenAt.getDate() === now.getDate() - 1) {\n  //         return \"yesterday \" + (writtenAt.getHours() < 10 ? \"0\" + writtenAt.getHours().toString() : writtenAt.getHours().toString()) + \":\" +\n  //             (writtenAt.getMinutes() < 10 ? \"0\" + writtenAt.getMinutes().toString() : writtenAt.getMinutes().toString()) + \":\" +\n  //             (writtenAt.getSeconds() < 10 ? \"0\" + writtenAt.getSeconds().toString() : writtenAt.getSeconds().toString());\n  //     } else if (writtenAt.getFullYear() === now.getFullYear()) {\n  //         return (writtenAt.getDate() < 10 ? \"0\" + writtenAt.getDate().toString() : writtenAt.getDate().toString()) + \".\" +\n  //             (writtenAt.getMonth() < 10 ? \"0\" + writtenAt.getMonth().toString() : writtenAt.getMonth().toString()) +\n  //             \". \" + (writtenAt.getHours() < 10 ? \"0\" + writtenAt.getHours().toString() : writtenAt.getHours().toString()) + \":\" +\n  //             (writtenAt.getMinutes() < 10 ? \"0\" + writtenAt.getMinutes().toString() : writtenAt.getMinutes().toString()) + \":\" +\n  //             (writtenAt.getSeconds() < 10 ? \"0\" + writtenAt.getSeconds().toString() : writtenAt.getSeconds().toString());\n  //     } else {\n  //         return (writtenAt.getDate() < 10 ? \"0\" + writtenAt.getDate().toString() : writtenAt.getDate()) + \".\" +\n  //             (writtenAt.getMonth() < 10 ? \"0\" + writtenAt.getMonth().toString() : writtenAt.getMonth()) + \".\" +\n  //             writtenAt.getFullYear().toString() +\n  //             \" \" + (writtenAt.getHours() < 10 ? \"0\" + writtenAt.getHours().toString() : writtenAt.getHours()) + \":\" +\n  //             (writtenAt.getMinutes() < 10 ? \"0\" + writtenAt.getMinutes().toString() : writtenAt.getMinutes()) + \":\" +\n  //             (writtenAt.getSeconds() < 10 ? \"0\" + writtenAt.getSeconds().toString() : writtenAt.getSeconds());\n  //     }\n  // }\n\n\n  render() {\n    if (this.state.post) {\n      let eachLine = this.state.post.text.map(text => {\n        return React.createElement(\"p\", {\n          className: \"eachLine\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, text);\n      });\n      return React.createElement(\"div\", {\n        className: \"postDetails\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"eachLine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, this.state.post.title), React.createElement(\"div\", {\n        className: \"rowFlex\",\n        style: {\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"eachMesDiv\",\n        style: {\n          backgroundImage: \"url(\".concat(this.state.post.author.profilePicUrl, \")\"),\n          width: \"30px\",\n          height: \"30px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"eachLine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Posted by \", this.state.post.author.username)), eachLine);\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/share/EachPost.jsx"],"names":["React","Component","axios","EachPost","constructor","props","state","componentDidMount","params","match","method","baseURL","process","env","REACT_APP_API","id","withCredentials","then","response","console","log","data","now","Date","changePost","setState","post","catch","err","render","eachLine","text","map","title","alignItems","backgroundImage","author","profilePicUrl","width","height","username"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC5CG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW,EAAX,CAFc,CAGd;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AAAA,UACPC,MADO,GACI,KAAKH,KAAL,CAAWI,KADf,CACPD,MADO;AAEf;AACAN,IAAAA,KAAK,CAAC;AACFQ,MAAAA,MAAM,EAAC,KADL;AAEFC,MAAAA,OAAO,YAAIC,OAAO,CAACC,GAAR,CAAYC,aAAhB,mBAAsCN,MAAM,CAACO,EAA7C,CAFL;AAGFC,MAAAA,eAAe,EAAC;AAHd,KAAD,CAAL,CAKCC,IALD,CAKMC,QAAQ,IAAE;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACA,UAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;AACA,UAAIC,UAAU,GAAGN,QAAQ,CAACG,IAA1B,CAHY,CAIZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAKI,QAAL,CAAc;AAACC,QAAAA,IAAI,EAACF;AAAN,OAAd;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,UAAZ;AACH,KApBD,EAqBCG,KArBD,CAqBOC,GAAG,IAAE;AACRT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH,KAvBD;AAwBH,GAlC2C,CAoC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACL,QAAG,KAAKvB,KAAL,CAAWoB,IAAd,EAAmB;AACf,UAAII,QAAQ,GAAE,KAAKxB,KAAL,CAAWoB,IAAX,CAAgBK,IAAhB,CAAqBC,GAArB,CAAyBD,IAAI,IAAE;AACzC,eACI;AAAG,UAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBA,IAAzB,CADJ;AAGH,OAJa,CAAd;AAKA,aACA;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0B,KAAKzB,KAAL,CAAWoB,IAAX,CAAgBO,KAA1C,CADJ,EAEI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAyB,QAAA,KAAK,EAAE;AAACC,UAAAA,UAAU,EAAC;AAAZ,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,KAAK,EAAE;AAACC,UAAAA,eAAe,gBAAS,KAAK7B,KAAL,CAAWoB,IAAX,CAAgBU,MAAhB,CAAuBC,aAAhC,MAAhB;AAAkEC,UAAAA,KAAK,EAAC,MAAxE;AAAgFC,UAAAA,MAAM,EAAC;AAAvF,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAEA;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAmC,KAAKjC,KAAL,CAAWoB,IAAX,CAAgBU,MAAhB,CAAuBI,QAA1D,CAFA,CAFJ,EAQKV,QARL,CADA;AAYH,KAlBD,MAmBI;AACA,aACI,yCADJ;AAIH;AAEJ;;AA5F2C","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class EachPost extends Component {\n    constructor(props){\n        super(props);\n        this.state={};\n        // this.formatWrittenAt= this.formatWrittenAt.bind(this)\n    }\n\n    componentDidMount(){\n        const { params } = this.props.match;\n        debugger\n        axios({\n            method:\"GET\",\n            baseURL:`${process.env.REACT_APP_API}/post/${params.id}`,\n            withCredentials:true\n        })\n        .then(response=>{\n            console.log(response.data)\n            let now = new Date();\n            let changePost = response.data;\n            // if (changePost.text[0].length > 100) {\n            //     changePost.short = []\n            //     changePost.short[0] = changePost.text[0].substring(0, 100) + \"...\"\n            // } else if (changePost.text.length > 1) {\n            //     changePost.short = []\n            //     changePost.short[0] = changePost.text[0]\n            //     changePost.short[1] = \"...\"\n            // }\n            // changePost.niceTime = this.formatWrittenAt(changePost.writtenAt, now);\n            this.setState({post:changePost})\n            console.log(changePost)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }\n\n    // formatWrittenAt = (writtenAt, now)=> {\n    //     if (writtenAt.getDate() === now.getDate() &&\n    //         writtenAt.getMonth() === now.getMonth() &&\n    //         writtenAt.getFullYear() === now.getFullYear()) {\n    //         return \"today \" + (writtenAt.getHours() < 10 ? \"0\" + writtenAt.getHours().toString() : writtenAt.getHours().toString()) + \":\" +\n    //             (writtenAt.getMinutes() < 10 ? \"0\" + writtenAt.getMinutes().toString() : writtenAt.getMinutes().toString()) + \":\" +\n    //             (writtenAt.getSeconds() < 10 ? \"0\" + writtenAt.getSeconds().toString() : writtenAt.getSeconds().toString());\n    //     } else if (writtenAt.getMonth() === now.getMonth() &&\n    //         writtenAt.getFullYear() === now.getFullYear() &&\n    //         writtenAt.getDate() === now.getDate() - 1) {\n    //         return \"yesterday \" + (writtenAt.getHours() < 10 ? \"0\" + writtenAt.getHours().toString() : writtenAt.getHours().toString()) + \":\" +\n    //             (writtenAt.getMinutes() < 10 ? \"0\" + writtenAt.getMinutes().toString() : writtenAt.getMinutes().toString()) + \":\" +\n    //             (writtenAt.getSeconds() < 10 ? \"0\" + writtenAt.getSeconds().toString() : writtenAt.getSeconds().toString());\n    //     } else if (writtenAt.getFullYear() === now.getFullYear()) {\n    //         return (writtenAt.getDate() < 10 ? \"0\" + writtenAt.getDate().toString() : writtenAt.getDate().toString()) + \".\" +\n    //             (writtenAt.getMonth() < 10 ? \"0\" + writtenAt.getMonth().toString() : writtenAt.getMonth().toString()) +\n    //             \". \" + (writtenAt.getHours() < 10 ? \"0\" + writtenAt.getHours().toString() : writtenAt.getHours().toString()) + \":\" +\n    //             (writtenAt.getMinutes() < 10 ? \"0\" + writtenAt.getMinutes().toString() : writtenAt.getMinutes().toString()) + \":\" +\n    //             (writtenAt.getSeconds() < 10 ? \"0\" + writtenAt.getSeconds().toString() : writtenAt.getSeconds().toString());\n    //     } else {\n    //         return (writtenAt.getDate() < 10 ? \"0\" + writtenAt.getDate().toString() : writtenAt.getDate()) + \".\" +\n    //             (writtenAt.getMonth() < 10 ? \"0\" + writtenAt.getMonth().toString() : writtenAt.getMonth()) + \".\" +\n    //             writtenAt.getFullYear().toString() +\n    //             \" \" + (writtenAt.getHours() < 10 ? \"0\" + writtenAt.getHours().toString() : writtenAt.getHours()) + \":\" +\n    //             (writtenAt.getMinutes() < 10 ? \"0\" + writtenAt.getMinutes().toString() : writtenAt.getMinutes()) + \":\" +\n    //             (writtenAt.getSeconds() < 10 ? \"0\" + writtenAt.getSeconds().toString() : writtenAt.getSeconds());\n    //     }\n    // }\n\n    render() {\n        if(this.state.post){\n            let eachLine= this.state.post.text.map(text=>{\n                return(\n                    <p className=\"eachLine\">{text}</p>\n                )\n            })\n            return (\n            <div className=\"postDetails\">\n                <h3 className=\"eachLine\">{this.state.post.title}</h3>\n                <div className=\"rowFlex\" style={{alignItems:\"center\"}}>\n                <div className=\"eachMesDiv\" style={{backgroundImage: `url(${this.state.post.author.profilePicUrl})`, width:\"30px\", height:\"30px\"}}></div>\n                <p className=\"eachLine\">Posted by {this.state.post.author.username}                 \n                </p>\n                </div>\n                {/* on {this.state.post.niceTime} */}\n                {eachLine}\n            </div>\n        )\n        }\n        else{\n            return(\n                <>\n                </>\n            )\n        }\n        \n    }\n}\n"]},"metadata":{},"sourceType":"module"}