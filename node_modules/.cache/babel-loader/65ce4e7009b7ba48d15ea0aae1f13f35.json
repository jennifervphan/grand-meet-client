{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/share/AllPosts.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './AllPosts.css';\nimport { formatWrittenAt } from '../../method';\nimport EachPostCard from './EachPostCard';\nexport default class AllPosts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.formatWrittenAt = formatWrittenAt.bind(this);\n  }\n\n  componentDidMount() {\n    axios({\n      method: \"GET\",\n      baseURL: \"\".concat(process.env.REACT_APP_API, \"/post\"),\n      withCredentials: true\n    }).then(response => {\n      let changePost = response.data;\n      let now = new Date();\n      debugger;\n      let eachchangePost = changePost.map(post => {\n        if (post.text[0].length > 100) {\n          post.short = [];\n          post.short[0] = post.text[0].substring(0, 100) + \"...\";\n        } else if (post.text.length > 1) {\n          post.short = [];\n          post.short[0] = post.text[0];\n          post.short[1] = \"...\";\n        }\n\n        post.niceTime = this.formatWrittenAt(new Date(post.writtenAt), now);\n        return post;\n      });\n      this.setState({\n        posts: eachchangePost\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    if (this.state.posts) {\n      return React.createElement(EachPostCard, {\n        posts: this.state.posts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/share/AllPosts.jsx"],"names":["React","Component","axios","formatWrittenAt","EachPostCard","AllPosts","constructor","props","state","bind","componentDidMount","method","baseURL","process","env","REACT_APP_API","withCredentials","then","response","changePost","data","now","Date","eachchangePost","map","post","text","length","short","substring","niceTime","writtenAt","setState","posts","catch","err","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAAQC,eAAR,QAA8B,cAA9B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,eAAe,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC5CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY,EAAZ;AACA,SAAKL,eAAL,GAAqBA,eAAe,CAACM,IAAhB,CAAqB,IAArB,CAArB;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACfR,IAAAA,KAAK,CAAC;AACFS,MAAAA,MAAM,EAAE,KADN;AAEFC,MAAAA,OAAO,YAAIC,OAAO,CAACC,GAAR,CAAYC,aAAhB,UAFL;AAGFC,MAAAA,eAAe,EAAE;AAHf,KAAD,CAAL,CAKCC,IALD,CAKMC,QAAQ,IAAE;AACZ,UAAIC,UAAU,GAAGD,QAAQ,CAACE,IAA1B;AACA,UAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;AACA;AACA,UAAIC,cAAc,GAAEJ,UAAU,CAACK,GAAX,CAAeC,IAAI,IAAE;AACrC,YAAIA,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaC,MAAb,GAAsB,GAA1B,EAA+B;AAC/BF,UAAAA,IAAI,CAACG,KAAL,GAAa,EAAb;AACAH,UAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,IAAgBH,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaG,SAAb,CAAuB,CAAvB,EAA0B,GAA1B,IAAiC,KAAjD;AACH,SAHG,MAGE,IAAIJ,IAAI,CAACC,IAAL,CAAUC,MAAV,GAAmB,CAAvB,EAA0B;AAC5BF,UAAAA,IAAI,CAACG,KAAL,GAAa,EAAb;AACAH,UAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,IAAgBH,IAAI,CAACC,IAAL,CAAU,CAAV,CAAhB;AACAD,UAAAA,IAAI,CAACG,KAAL,CAAW,CAAX,IAAgB,KAAhB;AACC;;AACDH,QAAAA,IAAI,CAACK,QAAL,GAAgB,KAAK3B,eAAL,CAAqB,IAAImB,IAAJ,CAASG,IAAI,CAACM,SAAd,CAArB,EAA+CV,GAA/C,CAAhB;AACA,eAAOI,IAAP;AACH,OAXmB,CAApB;AAaA,WAAKO,QAAL,CAAc;AAACC,QAAAA,KAAK,EAACV;AAAP,OAAd;AACH,KAvBD,EAwBCW,KAxBD,CAwBOC,GAAG,IAAE;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KA1BD;AA2BH;;AAEDG,EAAAA,MAAM,GAAG;AACL,QAAG,KAAK9B,KAAL,CAAWyB,KAAd,EAAoB;AAChB,aAAO,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWyB,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFD,MAEO;AACH,aACI,yCADJ;AAIH;AAEJ;;AA/C2C","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './AllPosts.css';\nimport {formatWrittenAt} from '../../method'; \nimport EachPostCard from './EachPostCard';\n\nexport default class AllPosts extends Component {\n    constructor(props) {\n        super(props);\n        this.state= {};\n        this.formatWrittenAt=formatWrittenAt.bind(this);\n    }\n\n    componentDidMount(){\n        axios({\n            method: \"GET\",\n            baseURL:`${process.env.REACT_APP_API}/post`,\n            withCredentials: true\n        })\n        .then(response=>{\n            let changePost = response.data;\n            let now = new Date();\n            debugger\n            let eachchangePost= changePost.map(post=>{\n                if (post.text[0].length > 100) {\n                post.short = []\n                post.short[0] = post.text[0].substring(0, 100) + \"...\"\n            }else if (post.text.length > 1) {\n                post.short = []\n                post.short[0] = post.text[0]\n                post.short[1] = \"...\"\n                }\n                post.niceTime = this.formatWrittenAt(new Date(post.writtenAt), now);\n                return post\n            })\n        \n            this.setState({posts:eachchangePost})\n        })\n        .catch(err=>{\n            console.log(err);\n        })\n    }\n\n    render() {\n        if(this.state.posts){\n            return <EachPostCard posts={this.state.posts}/>\n        } else {\n            return(\n                <>\n                </>\n            )\n        }\n        \n    }\n}\n"]},"metadata":{},"sourceType":"module"}