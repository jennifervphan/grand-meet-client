{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/EachRoom.jsx\";\nimport React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport '../../pages/Inbox.css';\nexport default class EachRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      currentRoom: {\n        users: []\n      },\n      messages: [],\n      users: []\n    };\n    this.addMessage = this.addMessage.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      const params = this.props.match.params;\n      let roomId = params.id;\n      const chatManager = new ChatManager({\n        instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n        userId: this.props.userInSession.username,\n        tokenProvider: new TokenProvider({\n          url: \"\".concat(process.env.REACT_APP_API, \"/authenticate\")\n        })\n      });\n      chatManager.connect({\n        onRoomUpdated: room => {\n          const rooms = this.state.rooms;\n          const index = rooms.findIndex(r => r.id === room.id);\n          rooms[index] = room;\n          this.setState({\n            rooms\n          });\n        }\n      }).then(currentUser => {\n        debugger;\n        this.setState({\n          currentUser: currentUser,\n          messages: []\n        });\n        currentUser.subscribeToRoom({\n          roomId: \"\".concat(roomId),\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n              const currentRoom = this.state.currentRoom;\n              if (currentRoom === null) return;\n              return currentUser.setReadCursor({\n                roomId: currentRoom.id,\n                position: message.id\n              });\n            }\n          }\n        }).then(currentRoom => {\n          this.setState({\n            currentRoom,\n            rooms: currentUser.rooms,\n            users: currentRoom.userIds\n          });\n        }).catch(error => console.log(error));\n      });\n    }\n  }\n\n  componentDidMount() {\n    debugger;\n    const params = this.props.match.params;\n    let roomId = params.id;\n    const chatManager = new ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.props.userInSession.username,\n      tokenProvider: new TokenProvider({\n        url: \"\".concat(process.env.REACT_APP_API, \"/authenticate\")\n      })\n    });\n    chatManager.connect({\n      onRoomUpdated: room => {\n        const rooms = this.state.rooms;\n        const index = rooms.findIndex(r => r.id === room.id);\n        rooms[index] = room;\n        this.setState({\n          rooms\n        });\n      }\n    }).then(currentUser => {\n      debugger;\n      this.setState({\n        currentUser: currentUser,\n        message: []\n      });\n      currentUser.subscribeToRoomMultipart({\n        roomId: \"\".concat(roomId),\n        messageLimit: 50,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          }\n        }\n      }).then(currentRoom => {\n        debugger;\n        this.setState({\n          currentRoom,\n          users: currentRoom.userIds\n        });\n      }).catch(error => console.log(error));\n    });\n  }\n\n  addMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id\n    }).catch(error => console.error('error', error));\n  }\n\n  render() {\n    debugger;\n    return React.createElement(\"div\", {\n      className: \"eachRoom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(MessageList, Object.assign({\n      messages: this.state.messages\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(Input, {\n      className: \"input-field-one\",\n      onSubmit: this.addMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/EachRoom.jsx"],"names":["React","Component","ChatManager","TokenProvider","MessageList","Input","EachRoom","constructor","props","state","currentUser","currentRoom","users","messages","addMessage","bind","componentDidUpdate","prevProps","match","params","id","roomId","chatManager","instanceLocator","process","env","REACT_APP_chatkit_instance_locator","userId","userInSession","username","tokenProvider","url","REACT_APP_API","connect","onRoomUpdated","room","rooms","index","findIndex","r","setState","then","subscribeToRoom","messageLimit","hooks","onMessage","message","setReadCursor","position","userIds","catch","error","console","log","componentDidMount","subscribeToRoomMultipart","text","sendMessage","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport '../../pages/Inbox.css';\n\nexport default class EachRoom extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            currentUser:null,\n            currentRoom: {users:[]},\n            messages:[],\n            users:[]\n        }\n        this.addMessage = this.addMessage.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if(prevProps.match.params.id !== this.props.match.params.id) {\n            const {params}= this.props.match;\n            let roomId=params.id\n            const chatManager = new ChatManager({\n                instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n                userId: this.props.userInSession.username,\n                tokenProvider: new TokenProvider({\n                    url: `${process.env.REACT_APP_API}/authenticate`\n                })\n            })\n    \n            chatManager\n                    .connect({\n                        onRoomUpdated: room => {\n                            const { rooms } = this.state;\n                            const index = rooms.findIndex(r => r.id === room.id);\n                            rooms[index] = room;\n                            this.setState({\n                              rooms,\n                            });\n                          }\n                    })\n                    .then(currentUser => {\n                        debugger\n    \n                        this.setState({\n                            currentUser:currentUser,\n                            messages:[]\n                        })\n                        currentUser.subscribeToRoom({\n                            roomId: `${roomId}`,\n                            messageLimit: 100,\n                            hooks: {\n                                onMessage: message => {\n                                    this.setState({\n                                        messages: [...this.state.messages, message]\n                                    });\n                                    const {currentRoom} = this.state;\n                                    if (currentRoom === null) return;\n    \n                                    return currentUser.setReadCursor({\n                                        roomId: currentRoom.id,\n                                        position:message.id,\n                                    });\n                                },\n                            }})\n                            .then(currentRoom => {\n                            this.setState({\n                                currentRoom,\n                                rooms:currentUser.rooms,\n                                users: currentRoom.userIds\n                            })\n                            })\n                            .catch(error => console.log(error))\n                        })\n        }\n    }\n\n\n\n    componentDidMount (){\n        debugger\n        const {params}= this.props.match;\n        let roomId=params.id\n        const chatManager = new ChatManager({\n            instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n            userId: this.props.userInSession.username,\n            tokenProvider: new TokenProvider({\n                url: `${process.env.REACT_APP_API}/authenticate`\n            })\n        })\n\n        chatManager\n                .connect({\n                    onRoomUpdated: room => {\n                        const { rooms } = this.state;\n                        const index = rooms.findIndex(r => r.id === room.id);\n                        rooms[index] = room;\n                        this.setState({\n                          rooms,\n                        });\n                      }\n                })\n                .then(currentUser => {\n                    debugger\n\n                    this.setState({\n                        currentUser:currentUser,\n                        message:[]\n                    })\n                    currentUser.subscribeToRoomMultipart({\n                        roomId: `${roomId}`,\n                        messageLimit: 50,\n                        hooks: {\n                            onMessage: message => {\n                                this.setState({\n                                    messages: [...this.state.messages, message]\n                                })\n                            },\n                        }})\n                        .then(currentRoom => {\n                            debugger\n                        this.setState({\n                            currentRoom,\n                            users: currentRoom.userIds\n                        })\n                        })\n                        .catch(error => console.log(error))\n    })}\n\n    addMessage(text) {\n        this.state.currentUser.sendMessage({\n            text,\n            roomId: this.state.currentRoom.id\n        })\n        .catch(error => console.error('error', error));\n    }\n\n    render() {\n        debugger\n        return (\n            <div className=\"eachRoom\"> \n                <MessageList messages={this.state.messages} {...this.props}/>           \n                <Input className=\"input-field-one\" onSubmit={this.addMessage} />            \n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}