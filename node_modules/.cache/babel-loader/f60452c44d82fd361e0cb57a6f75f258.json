{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/EachRoom.jsx\";\nimport React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport '../../pages/Inbox.css';\nexport default class EachRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      currentRoom: {\n        users: []\n      },\n      messages: [],\n      users: []\n    };\n    this.addMessage = this.addMessage.bind(this);\n  }\n\n  componentDidMount() {\n    debugger;\n    const params = this.props.match.params;\n    let roomId = params.id;\n    const chatManager = new ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.props.userInSession._id,\n      tokenProvider: new TokenProvider({\n        url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token\"\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      this.setState({\n        currentUser: currentUser\n      });\n      currentUser.subscribeToRoom({\n        roomId: \"\".concat(roomId),\n        messageLimit: 100,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          }\n        }\n      }).then(currentRoom => {\n        debugger;\n        console.log(currentRoom.userIds);\n        this.setState({\n          currentRoom,\n          users: currentRoom.userIds\n        });\n      }).catch(error => console.log(error));\n    });\n  }\n\n  addMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id\n    }).catch(error => console.error('error', error));\n  }\n\n  render() {\n    let eachMess = this.state.messages.map((message, index) => {\n      return React.createElement(\"li\", {\n        key: index,\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, message.text));\n    });\n    return React.createElement(\"div\", {\n      className: \"eachRoom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, eachMess), React.createElement(Input, {\n      className: \"input-field\",\n      onSubmit: this.addMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/EachRoom.jsx"],"names":["React","Component","ChatManager","TokenProvider","MessageList","Input","EachRoom","constructor","props","state","currentUser","currentRoom","users","messages","addMessage","bind","componentDidMount","params","match","roomId","id","chatManager","instanceLocator","process","env","REACT_APP_chatkit_instance_locator","userId","userInSession","_id","tokenProvider","url","connect","then","setState","subscribeToRoom","messageLimit","hooks","onMessage","message","console","log","userIds","catch","error","text","sendMessage","render","eachMess","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport '../../pages/Inbox.css';\n\nexport default class EachRoom extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            currentUser:null,\n            currentRoom: {users:[]},\n            messages:[],\n            users:[]\n        }\n        this.addMessage = this.addMessage.bind(this);\n    }\n\n    componentDidMount (){\n        debugger\n        const {params}= this.props.match;\n        let roomId=params.id\n        const chatManager = new ChatManager({\n            instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n            userId: this.props.userInSession._id,\n            tokenProvider: new TokenProvider({\n                url:`https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token`\n            })\n        })\n\n        chatManager\n                .connect()\n                .then(currentUser => {\n                    this.setState({\n                        currentUser:currentUser\n                    })\n                    currentUser.subscribeToRoom({\n                        roomId: `${roomId}`,\n                        messageLimit: 100,\n                        hooks: {\n                            onMessage: message => {\n                                this.setState({\n                                    messages: [...this.state.messages, message]\n                                })\n                            },\n                        }})\n                        .then(currentRoom => {\n                            debugger\n                        console.log(currentRoom.userIds);\n                        this.setState({\n                            currentRoom,\n                            users: currentRoom.userIds\n                        })\n                        })\n                        .catch(error => console.log(error))\n    })}\n\n    addMessage(text) {\n        this.state.currentUser.sendMessage({\n            text,\n            roomId: this.state.currentRoom.id\n        })\n        .catch(error => console.error('error', error));\n    }\n\n    render() {\n        let eachMess= this.state.messages.map((message, index)=>{\n            return(\n                <li key={index} className=\"\">\n                        <h3>{message.text}</h3>\n                    </li>\n            )   \n         })\n\n        return (\n            <div className=\"eachRoom\">\n                <ul>\n                {eachMess}\n                </ul>\n                <Input className=\"input-field\" onSubmit={this.addMessage} />            \n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}