{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/message/AllRooms.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { TokenProvider, ChatManager } from '@pusher/chatkit-client';\nimport axios from 'axios';\nimport './AllRooms.css';\nexport default class AllRooms extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: JSON.parse(localStorage.getItem('user')),\n      otherUsers: {} // currentRoom:this.props.currentRoom\n\n    };\n  }\n\n  componentDidMount() {\n    // axios.get(`${process.env.REACT_APP_API}/nearby`,\n    //              {withCredentials:true})\n    // .then(response=>{\n    //      this.setState({otherUsers:response.data})\n    //  })\n    // .catch(err=>{\n    // console.log(err)\n    // })\n    const chatManager = new ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.props.username,\n      tokenProvider: new TokenProvider({\n        url: \"\".concat(process.env.REACT_APP_API, \"/authenticate\")\n      })\n    });\n    chatManager.connect();\n  }\n\n  render() {\n    const rooms = this.props.rooms;\n\n    if (this.state.otherUsers) {\n      let eachRoom = rooms.map((room, index) => {\n        let roomName = room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0];\n        let partner = this.state.otherUsers.filter(user => user.username === roomName)[0];\n        const isRoomActive = room.id === this.props.currentRoom.id ? 'active' : '';\n        debugger;\n        return React.createElement(Link, {\n          className: \"eachRoom\",\n          to: \"/inbox/\".concat(room.id),\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          className: isRoomActive,\n          key: room.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"inboxList\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"eachMesDiv\",\n          style: {\n            backgroundImage: \"url(\".concat(partner.profilePicUrl, \")\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }), roomName)));\n      });\n      return React.createElement(\"ul\", {\n        className: \"roomsTab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, eachRoom);\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"No messages, search for nearby user to chat with!\");\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/message/AllRooms.jsx"],"names":["React","Component","Link","TokenProvider","ChatManager","axios","AllRooms","constructor","props","state","user","JSON","parse","localStorage","getItem","otherUsers","componentDidMount","chatManager","instanceLocator","process","env","REACT_APP_chatkit_instance_locator","userId","username","tokenProvider","url","REACT_APP_API","connect","render","rooms","eachRoom","map","room","index","roomName","filter","id","partner","isRoomActive","currentRoom","backgroundImage","profilePicUrl"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,wBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AAEA,eAAe,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAC5CM,EAAAA,WAAW,CAAEC,KAAF,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADC;AAEPC,MAAAA,UAAU,EAAC,EAFJ,CAGP;;AAHO,KAAX;AAKH;;AAEDC,EAAAA,iBAAiB,GAAE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,WAAW,GAAG,IAAIb,WAAJ,CAAgB;AAChCc,MAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,kCADG;AAEhCC,MAAAA,MAAM,EAAE,KAAKd,KAAL,CAAWe,QAFa;AAGhCC,MAAAA,aAAa,EAAE,IAAIrB,aAAJ,CAAkB;AAC7BsB,QAAAA,GAAG,YAAKN,OAAO,CAACC,GAAR,CAAYM,aAAjB;AAD0B,OAAlB;AAHiB,KAAhB,CAApB;AAQAT,IAAAA,WAAW,CACVU,OADD;AAEP;;AAGDC,EAAAA,MAAM,GAAG;AAAA,UACEC,KADF,GACU,KAAKrB,KADf,CACEqB,KADF;;AAEL,QAAG,KAAKpB,KAAL,CAAWM,UAAd,EAAyB;AACrB,UAAIe,QAAQ,GAAED,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAe;AAC3B,YAAIC,QAAQ,GAAEF,IAAI,CAAC,iBAAD,CAAJ,CAAwBG,MAAxB,CAA+BC,EAAE,IAAIA,EAAE,KAAK,KAAK3B,KAAL,CAAWC,IAAX,CAAgBa,QAA5D,EAAsE,CAAtE,CAAd;AACA,YAAIc,OAAO,GAAE,KAAK5B,KAAL,CAAWM,UAAX,CAAsBoB,MAAtB,CAA6BzB,IAAI,IAAIA,IAAI,CAACa,QAAL,KAAiBW,QAAtD,EAAgE,CAAhE,CAAb;AACA,cAAMI,YAAY,GAAGN,IAAI,CAACI,EAAL,KAAY,KAAK5B,KAAL,CAAW+B,WAAX,CAAuBH,EAAnC,GAAwC,QAAxC,GAAmD,EAAxE;AACA;AACA,eACI,oBAAC,IAAD;AAAM,UAAA,SAAS,EAAC,UAAhB;AAA2B,UAAA,EAAE,mBAAYJ,IAAI,CAACI,EAAjB,CAA7B;AAAoD,UAAA,GAAG,EAAEH,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAI,UAAA,SAAS,EAAEK,YAAf;AAA6B,UAAA,GAAG,EAAEN,IAAI,CAACI,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAK,UAAA,SAAS,EAAC,YAAf;AAA4B,UAAA,KAAK,EAAE;AAACI,YAAAA,eAAe,gBAASH,OAAO,CAACI,aAAjB;AAAhB,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,EAGCP,QAHD,CADJ,CADA,CADJ;AAWH,OAhBK,CAAd;AAiBQ,aACI;AAAI,QAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCJ,QADD,CADJ;AAKX,KAvBD,MAuBM;AACF,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADJ;AAKH;AAEJ;;AAjE2C","sourcesContent":["import React, { Component } from 'react'\nimport {Link} from 'react-router-dom';\nimport { TokenProvider, ChatManager } from '@pusher/chatkit-client';\nimport axios from 'axios';\nimport './AllRooms.css';\n\nexport default class AllRooms extends Component {\n    constructor (props){\n        super(props);\n        this.state={\n            user: JSON.parse(localStorage.getItem('user')),\n            otherUsers:{},\n            // currentRoom:this.props.currentRoom\n        }\n    }\n\n    componentDidMount(){\n            // axios.get(`${process.env.REACT_APP_API}/nearby`,\n            //              {withCredentials:true})\n            // .then(response=>{\n            //      this.setState({otherUsers:response.data})\n            //  })\n            // .catch(err=>{\n            // console.log(err)\n            // })\n            const chatManager = new ChatManager({\n                instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n                userId: this.props.username,\n                tokenProvider: new TokenProvider({\n                    url: `${process.env.REACT_APP_API}/authenticate`\n                })\n            });\n    \n            chatManager\n            .connect()\n    }\n\n\n    render() {\n        const {rooms} =this.props\n        if(this.state.otherUsers){\n            let eachRoom= rooms.map((room, index)=>{\n                        let roomName= room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0]\n                        let partner= this.state.otherUsers.filter(user => user.username=== roomName)[0]\n                        const isRoomActive = room.id === this.props.currentRoom.id ? 'active' : '';   \n                        debugger\n                        return(\n                            <Link className=\"eachRoom\" to={`/inbox/${room.id}`} key={index}>\n                            <li className={isRoomActive} key={room.id}>\n                                <div className=\"inboxList\">\n                                <div className=\"eachMesDiv\" style={{backgroundImage: `url(${partner.profilePicUrl})`}}>\n                                </div>\n                                {roomName}\n                                </div>\n                            </li>\n                            </Link>\n                        )\n                    })\n                    return (\n                        <ul className=\"roomsTab\">\n                        {eachRoom}   \n                        </ul>\n                    )\n        } else{\n            return(\n                <div>\n                    No messages, search for nearby user to chat with!\n                </div>\n            )\n        }\n        \n    }\n}\n"]},"metadata":{},"sourceType":"module"}