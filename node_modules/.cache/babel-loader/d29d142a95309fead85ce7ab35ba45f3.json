{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/Game.jsx\";\nimport React from 'react';\nimport { Segment, Grid } from 'semantic-ui-react';\nimport { TokenProvider, ChatManager } from '@pusher/chatkit';\nimport Rooms from './Rooms';\nimport Chat from './Chat';\nimport axios from 'axios';\nexport default class Games extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      joined: [],\n      joinable: []\n    };\n    this.chatManager = new ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      tokenProvider: new TokenProvider({\n        url: \"\".concat(process.env.REACT_APP_API, \"/share\")\n      }),\n      userId: props.username\n    });\n    this.chatManager.connect().then(currentUser => {\n      this.setState({\n        currentUser: currentUser\n      });\n      currentUser.getJoinableRooms().then(rooms => {\n        let lobby = rooms.find(room => room.name === 'Lobby');\n\n        if (lobby) {\n          currentUser.joinRoom({\n            roomId: lobby.id\n          });\n        } else {\n          lobby = currentUser.rooms.find(room => room.name === 'Lobby');\n        }\n\n        if (lobby) {\n          this.setState({\n            lobbyId: lobby.id,\n            activeRoom: lobby.id\n          });\n        }\n      });\n      setInterval(this._pollRooms.bind(this), 5000);\n\n      this._pollRooms();\n    }).catch(e => {\n      console.log('Failed to connect to Chatkit');\n      console.log(e);\n    });\n  }\n\n  _pollRooms() {\n    const currentUser = this.state.currentUser;\n    currentUser.getJoinableRooms().then(rooms => {\n      this.setState({\n        joined: currentUser.rooms,\n        joinable: rooms\n      });\n    });\n  }\n\n  _enterRoom(id) {\n    const currentUser = this.state.currentUser;\n    currentUser.joinRoom({\n      roomId: id\n    }).then(() => {\n      this.setState({\n        activeRoom: id\n      });\n\n      this._pollRooms();\n    }).catch(() => {\n      console.log('Failed to enter room');\n    });\n  }\n\n  _leaveRoom(id) {\n    const currentUser = this.state.currentUser;\n    currentUser.leaveRoom({\n      roomId: id\n    }).then(() => {\n      this._pollRooms();\n    }).catch(() => {\n      console.log('Failed to leave room');\n    });\n  }\n\n  _startedGame(roomId, white, black) {\n    axios.request({\n      url: \"\".concat(process.env.REACT_APP_API, \"/games\"),\n      method: 'POST',\n      data: {\n        room: roomId,\n        whitePlayer: white,\n        blackPlayer: black\n      }\n    }).then(response => {\n      this.setState({\n        activeRoom: roomId\n      });\n\n      this._pollRooms();\n    });\n  }\n\n  render() {\n    const currentUser = this.state.currentUser;\n    let chat;\n\n    if (currentUser) {\n      const room = currentUser.rooms.find(room => room.id == this.state.activeRoom);\n\n      if (room) {\n        const game = this.state.activeRoom !== this.state.lobbyId && this.state.activeRoom;\n        chat = React.createElement(Chat, {\n          user: currentUser,\n          room: room,\n          key: room.id,\n          startedGame: this._startedGame.bind(this),\n          game: game,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        });\n      }\n    }\n\n    return React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Rooms, {\n      joined: this.state.joined,\n      joinable: this.state.joinable,\n      activeRoom: this.state.activeRoom,\n      enterRoom: this._enterRoom.bind(this),\n      leaveRoom: this._leaveRoom.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, chat)));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/Game.jsx"],"names":["React","Segment","Grid","TokenProvider","ChatManager","Rooms","Chat","axios","Games","Component","constructor","props","state","joined","joinable","chatManager","instanceLocator","process","env","REACT_APP_chatkit_instance_locator","tokenProvider","url","REACT_APP_API","userId","username","connect","then","currentUser","setState","getJoinableRooms","rooms","lobby","find","room","name","joinRoom","roomId","id","lobbyId","activeRoom","setInterval","_pollRooms","bind","catch","e","console","log","_enterRoom","_leaveRoom","leaveRoom","_startedGame","white","black","request","method","data","whitePlayer","blackPlayer","response","render","chat","game"],"mappings":"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","sourcesContent":["import React from 'react';\n    import { Segment, Grid } from 'semantic-ui-react';\n    import { TokenProvider, ChatManager } from '@pusher/chatkit';\n    import Rooms from './Rooms';\n    import Chat from './Chat';\n    import axios from 'axios';\n\n    export default class Games extends React.Component {\n        state = {\n            joined: [],\n            joinable: []\n        };\n        constructor(props) {\n            super(props);\n\n            this.chatManager = new ChatManager({\n                instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n                tokenProvider: new TokenProvider({\n                    url: `${process.env.REACT_APP_API}/share`,\n                }),\n                userId: props.username\n            });\n\n            this.chatManager.connect().then(currentUser => {\n                this.setState({\n                    currentUser: currentUser\n                });\n                currentUser.getJoinableRooms().then((rooms) => {\n                    let lobby = rooms.find(room => room.name === 'Lobby');\n                    if (lobby) {\n                        currentUser.joinRoom({ roomId: lobby.id });\n                    } else {\n                        lobby = currentUser.rooms.find(room => room.name === 'Lobby');\n                    }\n                    if (lobby) {\n                        this.setState({\n                            lobbyId: lobby.id,\n                            activeRoom: lobby.id\n                        });\n                    }\n                });\n                setInterval(this._pollRooms.bind(this), 5000);\n                this._pollRooms();\n            }).catch((e) => {\n                console.log('Failed to connect to Chatkit');\n                console.log(e);\n            });\n        }\n        _pollRooms() {\n            const { currentUser } = this.state;\n            currentUser.getJoinableRooms()\n                .then((rooms) => {\n                    this.setState({\n                        joined: currentUser.rooms,\n                        joinable: rooms\n                    })\n                });\n        }\n        _enterRoom(id) {\n            const { currentUser } = this.state;\n            currentUser.joinRoom({ roomId: id })\n                .then(() => {\n                    this.setState({\n                        activeRoom: id\n                    });\n                    this._pollRooms();\n                })\n                .catch(() => {\n                    console.log('Failed to enter room');\n                });\n        }\n        _leaveRoom(id) {\n            const { currentUser } = this.state;\n            currentUser.leaveRoom({ roomId: id })\n                .then(() => {\n                    this._pollRooms();\n                })\n                .catch(() => {\n                    console.log('Failed to leave room');\n                });\n        }\n\n        _startedGame(roomId, white, black) {\n            axios.request({\n                url: `${process.env.REACT_APP_API}/games`,\n                method: 'POST',\n                data: {\n                    room: roomId,\n                    whitePlayer: white,\n                    blackPlayer: black\n                }\n            })\n            .then((response) => {\n                this.setState({\n                    activeRoom: roomId\n                });\n                this._pollRooms();\n            });\n          }\n      \n        render() {\n            const { currentUser } = this.state;\n            let chat;\n            if (currentUser) {\n                const room = currentUser.rooms.find((room) => room.id == this.state.activeRoom);\n                if (room) {\n                    const game = this.state.activeRoom !== this.state.lobbyId && this.state.activeRoom;\n                    chat = <Chat user={currentUser} room={room} key={room.id} startedGame={this._startedGame.bind(this)} game={game} />\n                }\n            }\n            return (\n                <Segment>\n                    <Grid>\n                        <Grid.Column width={4}>\n                            <Rooms joined={this.state.joined}\n                                   joinable={this.state.joinable}\n                                   activeRoom={this.state.activeRoom}\n                                   enterRoom={this._enterRoom.bind(this)}\n                                   leaveRoom={this._leaveRoom.bind(this)} />\n                        </Grid.Column>\n                        <Grid.Column width={12}>\n                            { chat }\n                        </Grid.Column>\n                    </Grid>\n                </Segment>\n            );\n        }\n    }"]},"metadata":{},"sourceType":"module"}