{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/AllRooms.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './AllRooms.css';\nexport default class AllRooms extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: JSON.parse(localStorage.getItem('user')),\n      otherUsers: {}\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"\".concat(process.env.REACT_APP_API, \"/nearby\"), {\n      withCredentials: true\n    }).then(response => {\n      this.setState({\n        otherUsers: response.data\n      });\n      const chatManager = new ChatManager({\n        instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n        userId: this.state.user.username,\n        tokenProvider: new TokenProvider({\n          url: \"\".concat(process.env.REACT_APP_API, \"/authenticate\")\n        })\n      });\n      chatManager.connect({\n        onRoomUpdated: room => {\n          const rooms = this.props.rooms.rooms;\n          const index = rooms.findIndex(r => r.id === room.id);\n          rooms[index] = room;\n          this.setState({\n            rooms\n          });\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    const rooms = this.props.rooms;\n    let eachRoom = rooms.map((room, index) => {\n      let roomName = room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0];\n      let partner = this.state.otherUsers.filter(user => user.username === roomName)[0];\n      const isRoomActive = room.id === this.props.currentRoom.id ? 'active' : '';\n      debugger;\n      return React.createElement(Link, {\n        className: \"eachRoom\",\n        to: \"/inbox/\".concat(room.id),\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: isRoomActive,\n        key: room.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"inboxList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"eachMesDiv\",\n        style: {\n          backgroundImage: \"url(\".concat(partner.profilePicUrl, \")\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), roomName, room.unreadCount > 0 ? React.createElement(\"span\", {\n        className: \"room-unread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, room.unreadCount) : null)));\n    });\n    return React.createElement(\"ul\", {\n      className: \"roomsTab\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, eachRoom);\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/AllRooms.jsx"],"names":["React","Component","Link","axios","AllRooms","constructor","props","state","user","JSON","parse","localStorage","getItem","otherUsers","componentDidMount","get","process","env","REACT_APP_API","withCredentials","then","response","setState","data","chatManager","ChatManager","instanceLocator","REACT_APP_chatkit_instance_locator","userId","username","tokenProvider","TokenProvider","url","connect","onRoomUpdated","room","rooms","index","findIndex","r","id","catch","err","console","log","render","eachRoom","map","roomName","filter","partner","isRoomActive","currentRoom","backgroundImage","profilePicUrl","unreadCount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport './AllRooms.css';\n\nexport default class AllRooms extends Component {\n    constructor (props){\n        super(props);\n        this.state={\n            user: JSON.parse(localStorage.getItem('user')),\n            otherUsers:{},\n        }\n    }\n\n    componentDidMount(){\n            axios.get(`${process.env.REACT_APP_API}/nearby`,\n                         {withCredentials:true})\n            .then(response=>{\n                 this.setState({otherUsers:response.data})\n\n                 const chatManager = new ChatManager({\n                    instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n                    userId: this.state.user.username,\n                    tokenProvider: new TokenProvider({\n                        url: `${process.env.REACT_APP_API}/authenticate`\n                    })\n                })\n        \n                chatManager\n                        .connect({onRoomUpdated: room => {\n                            const { rooms } = this.props.rooms;\n                            const index = rooms.findIndex(r => r.id === room.id);\n                            rooms[index] = room;\n                            this.setState({\n                              rooms,\n                            });\n                          }})\n             })\n            .catch(err=>{\n            console.log(err)\n            })\n    }\n\n\n    render() {\n        const {rooms} =this.props\n        let eachRoom= rooms.map((room, index)=>{\n            let roomName= room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0]\n            let partner= this.state.otherUsers.filter(user => user.username=== roomName)[0]\n            const isRoomActive = room.id === this.props.currentRoom.id ? 'active' : '';   \n            debugger\n            return(\n                <Link className=\"eachRoom\" to={`/inbox/${room.id}`} key={index}>\n                <li className={isRoomActive} key={room.id}>\n                    <div className=\"inboxList\">\n                    <div className=\"eachMesDiv\" style={{backgroundImage: `url(${partner.profilePicUrl})`}}>\n                    </div>\n                    {roomName}\n                    {room.unreadCount > 0 ? (\n                        <span className=\"room-unread\">{room.unreadCount}</span>\n                    ): null}\n                    </div>\n                </li>\n                </Link>\n            )\n        })\n        return (\n            <ul className=\"roomsTab\">\n             {eachRoom}   \n            </ul>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}