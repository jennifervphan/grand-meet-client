{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatRoom.jsx\";\nimport React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit';\nimport MessageList from './MessageList';\nexport default class ChatRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentScreen: \"UserScreen\",\n      messages: []\n    };\n  }\n\n  componentDidMount() {\n    debugger;\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.props.userInSession.username,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/:instance_id\" // `${process.env.REACT_APP_API}/authenticate`\n\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      debugger; // currentUser.createRoom({\n      //     name: 'General',\n      //     private: true,\n      //     addUserIds: [`${this.props.userInSession.username}`, 'kate'],\n      //     customData: { foo: 42 },\n      //   })\n      //   .then(room => {\n\n      return currentUser.subcribeToRoom({\n        roomId: \"24ab072d-77b6-4003-92e5-dca664986179\",\n        messageLimit: 100,\n        hooks: {\n          onNewMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          } //   })\n          // console.log(`Created room called ${room.name}`)\n\n        }\n      }).catch(err => {\n        console.log(\"Error creating room \".concat(err));\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatRoom.jsx"],"names":["React","Component","Chatkit","MessageList","ChatRoom","constructor","props","state","currentScreen","messages","componentDidMount","chatManager","ChatManager","instanceLocator","process","env","REACT_APP_chatkit_instance_locator","userId","userInSession","username","tokenProvider","TokenProvider","url","connect","then","currentUser","subcribeToRoom","roomId","messageLimit","hooks","onNewMessage","message","setState","catch","err","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC5CI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,aAAa,EAAE,YADR;AAEPC,MAAAA,QAAQ,EAAC;AAFF,KAAX;AAIH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB;AACA,UAAMC,WAAW,GAAG,IAAIT,OAAO,CAACU,WAAZ,CAAwB;AACxCC,MAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,kCADW;AAExCC,MAAAA,MAAM,EAAE,KAAKX,KAAL,CAAWY,aAAX,CAAyBC,QAFO;AAGxCC,MAAAA,aAAa,EAAE,IAAIlB,OAAO,CAACmB,aAAZ,CAA0B;AACrCC,QAAAA,GAAG,EAAC,+EADiC,CAErC;;AAFqC,OAA1B;AAHyB,KAAxB,CAApB;AASAX,IAAAA,WAAW,CAACY,OAAZ,GACCC,IADD,CACOC,WAAW,IAAE;AAChB,eADgB,CAEhB;AACA;AACA;AACA;AACA;AACA;AACA;;AACM,aAAOA,WAAW,CAACC,cAAZ,CAA2B;AAC9BC,QAAAA,MAAM,EAAC,sCADuB;AAE9BC,QAAAA,YAAY,EAAC,GAFiB;AAG9BC,QAAAA,KAAK,EAAC;AACFC,UAAAA,YAAY,EAAEC,OAAO,IAAE;AACnB,iBAAKC,QAAL,CAAc;AACVvB,cAAAA,QAAQ,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,QAAf,EAAwBsB,OAAxB;AADA,aAAd;AAGH,WALC,CAOZ;AACA;;AARY;AAHwB,OAA3B,EAaVE,KAbU,CAaJC,GAAG,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,+BAAmCF,GAAnC;AACD,OAfU,CAAP;AAgBT,KA1BD;AA4BH;;AACDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,KAAK9B,KAAL,CAAWE,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAtD2C","sourcesContent":["import React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit';\nimport MessageList from './MessageList';\n\nexport default class ChatRoom extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            currentScreen: \"UserScreen\",\n            messages:[]\n        }\n    }\n    componentDidMount (){\n        debugger\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n            userId: this.props.userInSession.username,\n            tokenProvider: new Chatkit.TokenProvider({\n                url:\"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/:instance_id\"\n                // `${process.env.REACT_APP_API}/authenticate`\n            })\n        })\n\n        chatManager.connect()\n        .then( currentUser=>{\n            debugger\n            // currentUser.createRoom({\n            //     name: 'General',\n            //     private: true,\n            //     addUserIds: [`${this.props.userInSession.username}`, 'kate'],\n            //     customData: { foo: 42 },\n            //   })\n            //   .then(room => {\n                  return currentUser.subcribeToRoom({\n                      roomId:\"24ab072d-77b6-4003-92e5-dca664986179\",\n                      messageLimit:100,\n                      hooks:{\n                          onNewMessage: message=>{\n                              this.setState({\n                                  messages: [...this.state.messages,message]\n                              })\n                          }\n                      }\n                //   })\n                // console.log(`Created room called ${room.name}`)\n              })\n              .catch(err => {\n                console.log(`Error creating room ${err}`)\n              })\n        })\n        \n    }\n    render() {\n        return (\n            <div>\n                <MessageList messages={this.state.messages}/>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}