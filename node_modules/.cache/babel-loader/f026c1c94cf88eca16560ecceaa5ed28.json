{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/EachRoom.jsx\";\nimport React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport '../../pages/Inbox.css';\nexport default class EachRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      currentRoom: {\n        users: []\n      },\n      messages: [],\n      users: []\n    };\n    this.addMessage = this.addMessage.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.id !== this.props.match.params.id) {\n      const params = this.props.match.params;\n      let roomId = params.id;\n      const chatManager = new ChatManager({\n        instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n        userId: this.props.userInSession.username,\n        tokenProvider: new TokenProvider({\n          url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token\"\n        })\n      });\n      chatManager.connect().then(currentUser => {\n        debugger;\n        this.setState({\n          currentUser: currentUser,\n          message: []\n        });\n        currentUser.subscribeToRoom({\n          roomId: \"\".concat(roomId),\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n            }\n          }\n        }).then(currentRoom => {\n          debugger;\n          console.log(currentRoom.userIds);\n          this.setState({\n            currentRoom,\n            users: currentRoom.userIds\n          });\n        }).catch(error => console.log(error));\n      });\n    }\n  }\n\n  componentDidMount() {\n    debugger;\n    const params = this.props.match.params;\n    let roomId = params.id;\n    const chatManager = new ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.props.userInSession.username,\n      tokenProvider: new TokenProvider({\n        url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token\"\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      debugger;\n      this.setState({\n        currentUser: currentUser\n      });\n      currentUser.subscribeToRoom({\n        roomId: \"\".concat(roomId),\n        messageLimit: 100,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          }\n        }\n      }).then(currentRoom => {\n        debugger;\n        console.log(currentRoom.userIds);\n        this.setState({\n          currentRoom,\n          users: currentRoom.userIds\n        });\n      }).catch(error => console.log(error));\n    });\n  }\n\n  addMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id\n    }).catch(error => console.error('error', error));\n  }\n\n  render() {\n    debugger;\n    return React.createElement(\"div\", {\n      className: \"eachRoom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(MessageList, Object.assign({\n      messages: this.state.messages\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(Input, {\n      className: \"input-field-one\",\n      onSubmit: this.addMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/EachRoom.jsx"],"names":["React","Component","ChatManager","TokenProvider","MessageList","Input","EachRoom","constructor","props","state","currentUser","currentRoom","users","messages","addMessage","bind","componentDidUpdate","prevProps","match","params","id","roomId","chatManager","instanceLocator","process","env","REACT_APP_chatkit_instance_locator","userId","userInSession","username","tokenProvider","url","connect","then","setState","message","subscribeToRoom","messageLimit","hooks","onMessage","console","log","userIds","catch","error","componentDidMount","text","sendMessage","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport '../../pages/Inbox.css';\n\nexport default class EachRoom extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            currentUser:null,\n            currentRoom: {users:[]},\n            messages:[],\n            users:[]\n        }\n        this.addMessage = this.addMessage.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if(prevProps.match.params.id !== this.props.match.params.id) {\n            const {params}= this.props.match;\n            let roomId=params.id\n            const chatManager = new ChatManager({\n                instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n                userId: this.props.userInSession.username,\n                tokenProvider: new TokenProvider({\n                    url:`https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token`\n                })\n            })\n    \n            chatManager\n                    .connect()\n                    .then(currentUser => {\n                        debugger\n    \n                        this.setState({\n                            currentUser:currentUser,\n                            message:[]\n                        })\n                        currentUser.subscribeToRoom({\n                            roomId: `${roomId}`,\n                            messageLimit: 100,\n                            hooks: {\n                                onMessage: message => {\n                                    this.setState({\n                                        messages: [...this.state.messages, message]\n                                    })\n                                },\n                            }})\n                            .then(currentRoom => {\n                                debugger\n                            console.log(currentRoom.userIds);\n                            this.setState({\n                                currentRoom,\n                                users: currentRoom.userIds\n                            })\n                            })\n                            .catch(error => console.log(error))\n                        })\n        }\n    }\n\n\n\n    componentDidMount (){\n        debugger\n        const {params}= this.props.match;\n        let roomId=params.id\n        const chatManager = new ChatManager({\n            instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n            userId: this.props.userInSession.username,\n            tokenProvider: new TokenProvider({\n                url:`https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token`\n            })\n        })\n\n        chatManager\n                .connect()\n                .then(currentUser => {\n                    debugger\n\n                    this.setState({\n                        currentUser:currentUser\n                    })\n                    currentUser.subscribeToRoom({\n                        roomId: `${roomId}`,\n                        messageLimit: 100,\n                        hooks: {\n                            onMessage: message => {\n                                this.setState({\n                                    messages: [...this.state.messages, message]\n                                })\n                            },\n                        }})\n                        .then(currentRoom => {\n                            debugger\n                        console.log(currentRoom.userIds);\n                        this.setState({\n                            currentRoom,\n                            users: currentRoom.userIds\n                        })\n                        })\n                        .catch(error => console.log(error))\n    })}\n\n    addMessage(text) {\n        this.state.currentUser.sendMessage({\n            text,\n            roomId: this.state.currentRoom.id\n        })\n        .catch(error => console.error('error', error));\n    }\n\n    render() {\n        debugger\n        return (\n            <div className=\"eachRoom\"> \n                <MessageList messages={this.state.messages} {...this.props}/>           \n                <Input className=\"input-field-one\" onSubmit={this.addMessage} />            \n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}