{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/AllRooms.jsx\";\nimport React, { Component } from 'react';\nimport { Link, Route } from 'react-router-dom';\nimport axios from 'axios';\nimport './AllRooms.css';\nimport EachRoom from '../message/EachRoom';\nexport default class AllRooms extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUnread = room => {\n      this.setState({\n        currentRoom: room\n      });\n    };\n\n    this.state = {\n      user: JSON.parse(localStorage.getItem('user')),\n      otherUsers: {},\n      currentRoom: {}\n    };\n    this.getUnread = this.getUnread.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(\"\".concat(process.env.REACT_APP_API, \"/nearby\"), {\n      withCredentials: true\n    }).then(response => {\n      this.setState({\n        otherUsers: response.data\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    const rooms = this.props.rooms;\n    let eachRoom = rooms.map((room, index) => {\n      let roomName = room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0];\n      let partner = this.state.otherUsers.filter(user => user.username === roomName)[0];\n      const isRoomActive = room.id === this.state.currentRoom.id ? 'active' : '';\n      return React.createElement(Link, {\n        className: \"eachRoom\",\n        to: \"/inbox/\".concat(room.id),\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: isRoomActive,\n        key: room.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"inboxList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"eachMesDiv\",\n        style: {\n          backgroundImage: \"url(\".concat(partner.profilePicUrl, \")\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), roomName, room.unreadCount > 0 ? React.createElement(\"span\", {\n        className: \"room-unread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, room.unreadCount) : null)));\n    });\n    return React.createElement(\"div\", {\n      className: \"eachRoom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"roomsTab\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, eachRoom), React.createElement(Route, {\n      path: \"/inbox/:id\",\n      render: props => React.createElement(EachRoom, Object.assign({\n        rooms: this.state.chatRooms,\n        userInSession: this.state.currentUser\n      }, this.props, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/AllRooms.jsx"],"names":["React","Component","Link","Route","axios","EachRoom","AllRooms","constructor","props","getUnread","room","setState","currentRoom","state","user","JSON","parse","localStorage","getItem","otherUsers","bind","componentDidMount","get","process","env","REACT_APP_API","withCredentials","then","response","data","catch","err","console","log","render","rooms","eachRoom","map","index","roomName","filter","id","username","partner","isRoomActive","backgroundImage","profilePicUrl","unreadCount","chatRooms","currentUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Link, Route} from 'react-router-dom';\nimport axios from 'axios';\nimport './AllRooms.css';\nimport EachRoom from '../message/EachRoom';\n\nexport default class AllRooms extends Component {\n    constructor (props){\n        super(props);\n        this.state={\n            user: JSON.parse(localStorage.getItem('user')),\n            otherUsers:{},\n            currentRoom:{}\n        };\n        this.getUnread= this.getUnread.bind(this);\n    }\n\n    componentDidMount(){\n            axios.get(`${process.env.REACT_APP_API}/nearby`,\n                         {withCredentials:true})\n            .then(response=>{\n                 this.setState({otherUsers:response.data})\n             })\n            .catch(err=>{\n            console.log(err)\n            })\n    }\n\n    getUnread=(room)=>{\n        this.setState({currentRoom:room})\n    }\n\n    render() {\n        const {rooms} =this.props\n        let eachRoom= rooms.map((room, index)=>{\n            let roomName= room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0]\n            let partner= this.state.otherUsers.filter(user => user.username=== roomName)[0]\n            const isRoomActive = room.id === this.state.currentRoom.id ? 'active' : '';\n            return(\n                <Link className=\"eachRoom\" to={`/inbox/${room.id}`} key={index}>\n                <li  className={isRoomActive} key={room.id}>\n                    <div className=\"inboxList\">\n                    <div className=\"eachMesDiv\" style={{backgroundImage: `url(${partner.profilePicUrl})`}}>\n                    </div>\n                        {roomName}\n                        {room.unreadCount > 0 ? (\n                            <span className=\"room-unread\">{room.unreadCount}</span>\n                        ): null}\n                    </div>\n                </li>\n                </Link>\n            )\n        })\n        return (\n            <div className=\"eachRoom\">\n                <ul className=\"roomsTab\">\n                    {eachRoom}   \n                </ul>\n                <Route path=\"/inbox/:id\" render={(props)=><EachRoom rooms={this.state.chatRooms} userInSession={this.state.currentUser} {...this.props} {...props}/>}/>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}