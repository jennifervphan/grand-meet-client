{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatApp.jsx\";\n// import React, { Component } from 'react';\n// import Talk from 'talkjs';\n// export default class ChatApp extends Component {\n//     constructor (props){\n//         super (props);\n//         this.inbox=undefined;\n//     }\n//     componentDidMount() {\n//         // Promise can be `then`ed multiple times\n//         Talk.ready\n//             .then(() => {\n//                 const me = new Talk.User({\n//                     id: `${this.props.userInSession._id}`,\n//                     name: `${this.props.userInSession.username}`,\n//                     photoUrl: `${this.props.userInSession.profilePicUrl}`,\n//                     welcomeMessage: \"Hey there! How are you? :-)\"\n//                 });\n//                 if (!window.talkSession) {\n//                     window.talkSession = new Talk.Session({\n//                         appId: \"txjMxHYM\",\n//                         me: me\n//                     });\n//                 }\n//                 const other = new Talk.User({\n//                     id: `${this.props.location.chatPartner.user._id}`,\n//                     name: `${this.props.location.chatPartner.user.username}`,\n//                     photoUrl: `${this.props.location.chatPartner.user.profilePicUrl}`,\n//                     welcomeMessage: \"Hey there! Love to chat :-)\"\n//                 });\n//                 // You control the ID of a conversation. oneOnOneId is a helper method that generates\n//                 // a unique conversation ID for a given pair of users. \n//                 const conversationId = Talk.oneOnOneId(me, other);\n//                 const conversation = window.talkSession.getOrCreateConversation(conversationId);\n//                 conversation.setParticipant(me);\n//                 conversation.setParticipant(other);\n//                 this.inbox = window.talkSession.createInbox({\n//                     selected: conversation\n//                 });\n//                 this.inbox.mount(this.container);\n//             })\n//             .catch(e => console.error(e));\n//     }\n//     componentWillUnmount() {\n//         if (this.inbox) {\n//             this.inbox.destroy();\n//         }\n//     }\n//     render() {\n//         return ( \n//             < span >\n//             <div style = {{ height: '100vh' }} ref = { c => this.container = c }> Loading... \n//             </div> \n//             </span > );\n//     }\n// }\nimport React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport axios from 'axios';\nexport default class ChatApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      chatPartner: this.props.location.chatPartner.user,\n      currentRoom: {\n        users: []\n      },\n      messages: [],\n      users: []\n    };\n    this.addMessage = this.addMessage.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(\"\".concat(process.env.REACT_APP_API, \"/newChat\"), {\n      withCredentials: true\n    }).then(response => {\n      let chatRooms = response.data; // this.setState({chatRooms:chatRooms})\n    });\n    const chatManager = new ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.props.userInSession._id,\n      tokenProvider: new TokenProvider({\n        url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token\"\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      this.setState({\n        currentUser: currentUser\n      });\n      return currentUser.createRoom({\n        name: \"\".concat(this.props.location.chatPartner.user.username),\n        private: true,\n        addUserIds: [\"\".concat(this.state.chatPartner._id)],\n        customData: {\n          foo: 42\n        }\n      }).then(room => {\n        return currentUser.subscribeToRoom({\n          roomId: \"\".concat(room.id),\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n            }\n          }\n        }).then(currentRoom => {\n          console.log(currentRoom.userIds);\n          this.setState({\n            currentRoom,\n            users: currentRoom.userIds\n          });\n        }).catch(error => console.log(error));\n      });\n    });\n  }\n\n  addMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id\n    }).catch(error => console.error('error', error));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(MessageList, Object.assign({\n      messages: this.state.messages\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })), React.createElement(Input, {\n      className: \"input-field\",\n      onSubmit: this.addMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/ChatApp.jsx"],"names":["React","Component","ChatManager","TokenProvider","MessageList","Input","axios","ChatApp","constructor","props","state","currentUser","chatPartner","location","user","currentRoom","users","messages","addMessage","bind","componentDidMount","get","process","env","REACT_APP_API","withCredentials","then","response","chatRooms","data","chatManager","instanceLocator","REACT_APP_chatkit_instance_locator","userId","userInSession","_id","tokenProvider","url","connect","setState","createRoom","name","username","private","addUserIds","customData","foo","room","subscribeToRoom","roomId","id","messageLimit","hooks","onMessage","message","console","log","userIds","catch","error","text","sendMessage","render"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react';\n// import Talk from 'talkjs';\n\n// export default class ChatApp extends Component {\n//     constructor (props){\n//         super (props);\n//         this.inbox=undefined;\n//     }\n//     componentDidMount() {\n//         // Promise can be `then`ed multiple times\n//         Talk.ready\n//             .then(() => {\n//                 const me = new Talk.User({\n//                     id: `${this.props.userInSession._id}`,\n//                     name: `${this.props.userInSession.username}`,\n//                     photoUrl: `${this.props.userInSession.profilePicUrl}`,\n//                     welcomeMessage: \"Hey there! How are you? :-)\"\n//                 });\n\n//                 if (!window.talkSession) {\n//                     window.talkSession = new Talk.Session({\n//                         appId: \"txjMxHYM\",\n//                         me: me\n//                     });\n//                 }\n\n//                 const other = new Talk.User({\n//                     id: `${this.props.location.chatPartner.user._id}`,\n//                     name: `${this.props.location.chatPartner.user.username}`,\n//                     photoUrl: `${this.props.location.chatPartner.user.profilePicUrl}`,\n//                     welcomeMessage: \"Hey there! Love to chat :-)\"\n//                 });\n\n//                 // You control the ID of a conversation. oneOnOneId is a helper method that generates\n//                 // a unique conversation ID for a given pair of users. \n//                 const conversationId = Talk.oneOnOneId(me, other);\n\n//                 const conversation = window.talkSession.getOrCreateConversation(conversationId);\n//                 conversation.setParticipant(me);\n//                 conversation.setParticipant(other);\n\n//                 this.inbox = window.talkSession.createInbox({\n//                     selected: conversation\n//                 });\n//                 this.inbox.mount(this.container);\n\n//             })\n//             .catch(e => console.error(e));\n//     }\n\n//     componentWillUnmount() {\n//         if (this.inbox) {\n//             this.inbox.destroy();\n//         }\n//     }\n\n//     render() {\n//         return ( \n//             < span >\n//             <div style = {{ height: '100vh' }} ref = { c => this.container = c }> Loading... \n//             </div> \n//             </span > );\n//     }\n// }\n\n\n\n\nimport React, { Component } from 'react';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport MessageList from './MessageList';\nimport Input from './Input';\nimport axios from 'axios';\n\nexport default class ChatApp extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            currentUser:null,\n            chatPartner: this.props.location.chatPartner.user,\n            currentRoom: {users:[]},\n            messages:[],\n            users:[]\n        }\n        this.addMessage = this.addMessage.bind(this);\n    }\n\n    componentDidMount (){\n        axios.get(`${process.env.REACT_APP_API}/newChat`, \n        {withCredentials:true})\n        .then(response => {\n            let chatRooms= response.data;\n            \n            // this.setState({chatRooms:chatRooms})\n        })\n        const chatManager = new ChatManager({\n            instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n            userId: this.props.userInSession._id,\n            tokenProvider: new TokenProvider({\n                url:`https://us1.pusherplatform.io/services/chatkit_token_provider/v1/95077b15-c43c-4d68-ae92-7a1f082f91c8/token`\n            })\n        })\n\n        chatManager\n                .connect()\n                .then(currentUser => {\n                    this.setState({\n                        currentUser:currentUser\n                    })\n\n                    return currentUser.createRoom({\n                        name: `${this.props.location.chatPartner.user.username}`,\n                        private: true,\n                        addUserIds: [ `${this.state.chatPartner._id}`],\n                        customData: { foo: 42 },\n                      })\n                      .then(room => {\n                        return currentUser.subscribeToRoom({\n                            roomId: `${room.id}`,\n                            messageLimit: 100,\n                            hooks: {\n                                onMessage: message => {\n                                    this.setState({\n                                        messages: [...this.state.messages, message]\n                                    })\n                                },\n                            }})\n                            .then(currentRoom => {\n                            console.log(currentRoom.userIds);\n                            this.setState({\n                                currentRoom,\n                                users: currentRoom.userIds\n                            })\n                            })\n                            .catch(error => console.log(error))\n                    })\n                })\n                \n    }\n    \n    addMessage(text) {\n        this.state.currentUser.sendMessage({\n            text,\n            roomId: this.state.currentRoom.id\n        })\n        .catch(error => console.error('error', error));\n    }\n\n    render() {\n        return (\n            <>\n                <MessageList messages={this.state.messages} {...this.props}/>\n                <Input className=\"input-field\" onSubmit={this.addMessage} />\n            </>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}