{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/Chat.jsx\";\nimport React from 'react';\nimport { Grid, List, Comment, Form, Input } from 'semantic-ui-react';\nimport GameBoard from './GameBoard';\nexport default class Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: this.props.room.userIds,\n      messages: [],\n      newMessage: ''\n    };\n    props.user.subscribeToRoom({\n      roomId: props.room.id,\n      messageLimit: 100,\n      hooks: {\n        onUserJoined: user => {\n          this.setState({\n            users: props.room.users\n          });\n        },\n        onUserLeft: user => {\n          this.setState({\n            users: props.room.users\n          });\n        },\n        onNewMessage: message => {\n          console.log(message);\n          const messages = this.state.messages;\n          let opponent;\n\n          if (message.attachment && message.attachment.link && message.attachment.link.startsWith('urn:player:')) {\n            opponent = message.attachment.link.substring(11);\n\n            if (opponent !== props.user.id) {\n              opponent = undefined;\n            }\n          }\n\n          messages.push({\n            id: message.id,\n            user: message.senderId,\n            message: this.state.newMessage,\n            opponent: opponent\n          });\n          this.setState({\n            messages: messages\n          });\n        }\n      }\n    }).then(currentRoom => {\n      console.log(currentRoom);\n      this.setState({\n        user: currentRoom.userIds\n      });\n    });\n  }\n\n  render() {\n    const users = this.state.users.filter(user => user.id !== this.props.user.id).map(user => React.createElement(List.Item, {\n      key: user.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(List.Content, {\n      floated: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: () => this._challengePlayer(user),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Challenge\")), React.createElement(List.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, user.name)));\n    const messages = this.state.messages.map(message => {\n      let acceptGame;\n\n      if (message.opponent) {\n        acceptGame = React.createElement(Comment.Actions, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(Comment.Action, {\n          onClick: () => this._acceptChallenge(message.user),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \"Accept Challenge\"));\n      }\n\n      return React.createElement(Comment, {\n        key: message.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Comment.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Comment.Author, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, message.user), React.createElement(Comment.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, message.message), acceptGame));\n    });\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.props.game && React.createElement(GameBoard, {\n      room: this.props.game,\n      user: this.props.user,\n      ref: child => {\n        this._gameBoard = child;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(Comment.Group, {\n      style: {\n        height: '20em',\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, messages), React.createElement(\"div\", {\n      style: {\n        float: \"left\",\n        clear: \"both\"\n      },\n      ref: el => {\n        this.messagesEnd = el;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(List, {\n      style: {\n        maxHeight: '20em',\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(List.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.props.user.name)), users))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this._handleSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Input, {\n      action: \"Post\",\n      placeholder: \"New Message...\",\n      value: this.state.newMessage,\n      fluid: true,\n      autoFocus: true,\n      onChange: this._handleNewMessageChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })))));\n  }\n\n  componentDidMount() {\n    this._scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this._scrollToBottom();\n  }\n\n  _scrollToBottom() {\n    this.messagesEnd.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }\n\n  _handleNewMessageChange(e) {\n    this.setState({\n      newMessage: e.target.value\n    });\n  }\n\n  _handleSubmit() {\n    const newMessage = this.state.newMessage;\n    const _this$props = this.props,\n          user = _this$props.user,\n          room = _this$props.room;\n    user.sendMessage({\n      text: newMessage,\n      roomId: room.id\n    });\n    this.setState({\n      newMessage: ''\n    });\n  }\n\n  _challengePlayer(player) {\n    const _this$props2 = this.props,\n          user = _this$props2.user,\n          room = _this$props2.room;\n    user.sendMessage({\n      text: \"I challenge \".concat(player.name, \" to a game\"),\n      roomId: room.id,\n      attachment: {\n        link: \"urn:player:\".concat(player.id),\n        type: 'file',\n        fetchRequired: false\n      }\n    });\n  }\n\n  _acceptChallenge(player) {\n    const user = this.props.user;\n    user.createRoom({\n      name: \"\".concat(user.id, \" vs \").concat(player),\n      addUserIds: [player]\n    }).then(room => {\n      this.props.startedGame(room.id, user.id, player);\n    });\n  }\n\n  getPlayersInRoom() {\n    const players = this._gameBoard ? this._gameBoard.getPlayers() : [];\n    const playersInRoom = this.state.users.filter(user => players.includes(user.id));\n    return playersInRoom;\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/Chat.jsx"],"names":["React","Grid","List","Comment","Form","Input","GameBoard","Chat","Component","constructor","props","state","users","room","userIds","messages","newMessage","user","subscribeToRoom","roomId","id","messageLimit","hooks","onUserJoined","setState","onUserLeft","onNewMessage","message","console","log","opponent","attachment","link","startsWith","substring","undefined","push","senderId","then","currentRoom","render","filter","map","_challengePlayer","name","acceptGame","_acceptChallenge","game","child","_gameBoard","height","overflow","float","clear","el","messagesEnd","maxHeight","_handleSubmit","bind","_handleNewMessageChange","componentDidMount","_scrollToBottom","componentDidUpdate","scrollIntoView","behavior","e","target","value","sendMessage","text","player","type","fetchRequired","createRoom","addUserIds","startedGame","getPlayersInRoom","players","getPlayers","playersInRoom","includes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Grid, List, Comment, Form, Input } from 'semantic-ui-react';\nimport GameBoard from './GameBoard';\n\nexport default class Chat extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            users: this.props.room.userIds,\n            messages: [],\n            newMessage: ''\n        };\n\n        props.user.subscribeToRoom({\n            roomId: props.room.id,\n            messageLimit: 100,\n            hooks: {\n                onUserJoined: (user) => {\n                    this.setState({\n                        users: props.room.users\n                    });\n                },\n                onUserLeft: (user) => {\n                    this.setState({\n                        users: props.room.users\n                    });\n                },\n                onNewMessage: (message) => {\n                    console.log(message)\n                    const messages = this.state.messages;\n                    let opponent;\n                    if (message.attachment && message.attachment.link && message.attachment.link.startsWith('urn:player:')) {\n                        opponent = message.attachment.link.substring(11);\n                        if (opponent !== props.user.id) {\n                            opponent = undefined;\n                        }\n                    }\n                    messages.push({\n                        id: message.id,\n                        user: message.senderId,\n                        message: this.state.newMessage,\n                        opponent: opponent\n                    });\n                    this.setState({\n                        messages: messages\n                    });\n                }\n            }\n        })\n        .then(currentRoom=>{\n            console.log(currentRoom)\n            this.setState({user: currentRoom.userIds})\n        })\n    }\n\n    render() {\n        const users = this.state.users\n            .filter((user) => user.id !== this.props.user.id)\n            .map((user) => (\n                <List.Item key={user.id}>\n                    <List.Content floated='right'>\n                        <a onClick={() => this._challengePlayer(user)}>Challenge</a>\n                    </List.Content>\n                    <List.Content>\n                        { user.name }\n                    </List.Content>\n                </List.Item>\n            ));\n\n        const messages = this.state.messages\n            .map((message) => {\n                let acceptGame;\n                if (message.opponent) {\n                    acceptGame = (\n                        <Comment.Actions>\n                            <Comment.Action onClick={() => this._acceptChallenge(message.user)}>Accept Challenge</Comment.Action>\n                        </Comment.Actions>\n                    );\n                }\n                return (\n                    <Comment key={message.id}>\n                        <Comment.Content>\n                            <Comment.Author>{ message.user }</Comment.Author>\n                            <Comment.Text>{ message.message }</Comment.Text>\n                            { acceptGame }\n                        </Comment.Content>\n                    </Comment>\n                );\n            });\n\n        return (\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={12}>\n                        { this.props.game && <GameBoard room={this.props.game} user={this.props.user} ref={(child) => { this._gameBoard = child; }}/> }\n                        <Comment.Group style={{height: '20em', overflow: 'auto'}}>\n                            { messages }\n                        </Comment.Group>\n                        <div style={{ float:\"left\", clear: \"both\" }} ref={(el) => { this.messagesEnd = el; }} />\n                    </Grid.Column>\n                    <Grid.Column width={4}>\n                        <List style={{maxHeight: '20em', overflow: 'auto'}}>\n                            <List.Item>\n                                <b>\n                                    { this.props.user.name }\n                                </b>\n                            </List.Item>\n                            { users }\n                        </List>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Form onSubmit={this._handleSubmit.bind(this)}>\n                            <Input action='Post'\n                                   placeholder='New Message...'\n                                   value={this.state.newMessage}\n                                   fluid\n                                   autoFocus\n                                   onChange={this._handleNewMessageChange.bind(this)} />\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        );\n    }\n\n    componentDidMount() {\n        this._scrollToBottom();\n    }\n\n    componentDidUpdate() {\n        this._scrollToBottom();\n    }\n\n    _scrollToBottom() {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    _handleNewMessageChange(e) {\n        this.setState({\n            newMessage: e.target.value\n        });\n    }\n\n    _handleSubmit() {\n        const { newMessage } = this.state;\n        const { user, room } = this.props;\n        user.sendMessage({\n            text: newMessage,\n            roomId: room.id\n        });\n        this.setState({\n            newMessage: ''\n        });\n    }\n\n    _challengePlayer(player) {\n        const { user, room } = this.props;\n        user.sendMessage({\n            text: `I challenge ${player.name} to a game`,\n            roomId: room.id,\n            attachment: {\n                link: `urn:player:${player.id}`,\n                type: 'file',\n                fetchRequired: false\n            }\n        });\n    }\n\n    _acceptChallenge(player) {\n        const { user } = this.props;\n        user.createRoom({\n            name: `${user.id} vs ${player}`,\n            addUserIds: [player]\n        }).then((room) => {\n            this.props.startedGame(room.id, user.id, player);\n        });\n    }\n\n    getPlayersInRoom() {\n        const players = this._gameBoard ? this._gameBoard.getPlayers() : [];\n        const playersInRoom = this.state.users\n            .filter((user) => players.includes(user.id));\n        return playersInRoom;\n    }\n}"]},"metadata":{},"sourceType":"module"}