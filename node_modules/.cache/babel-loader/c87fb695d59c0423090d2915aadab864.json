{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/GameBoard.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Grid, List } from 'semantic-ui-react';\nimport Pusher from 'pusher-js';\nimport \"./GameBoard.css\";\nvar pusher = new Pusher(\"4c266cab29bd293c0092\", {\n  cluster: \"eu\",\n  forceTLS: true\n});\nconst PIECES = {\n  'WK': '♔',\n  'WQ': '♕',\n  'WR': '♖',\n  'WB': '♗',\n  'WN': '♘',\n  'WP': '♙',\n  'BK': '♚',\n  'BQ': '♛',\n  'BR': '♜',\n  'BB': '♝',\n  'BN': '♞',\n  'BP': '♟'\n};\nexport default class GameBoard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      board: [],\n      players: {}\n    };\n  }\n\n  render() {\n    const board = this.state.board.map((row, rowIndex) => {\n      return row.map((piece, columnIndex) => {\n        const pieceSymbol = PIECES[piece];\n\n        if (pieceSymbol) {\n          return React.createElement(\"text\", {\n            key: rowIndex + '-' + columnIndex,\n            x: columnIndex,\n            y: rowIndex + 0.8,\n            style: {\n              font: '1px sans-serif'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          }, pieceSymbol);\n        }\n\n        return undefined;\n      }).filter(value => value);\n    });\n    let activeCell;\n\n    if (this.state.activeCell) {\n      activeCell = React.createElement(\"rect\", {\n        x: this.state.activeCell.x,\n        y: this.state.activeCell.y,\n        width: \"1\",\n        height: \"1\",\n        fillOpacity: \"0.5\",\n        fill: \"#F00\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      });\n    }\n\n    const players = Object.keys(this.state.players).map(player => {\n      const color = this.state.players[player];\n      return React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(List.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, color), player);\n    });\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      width: \"500\",\n      height: \"500\",\n      viewBox: \"-.5 -.10 8.1 8.1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"18\",\n      height: \"18\",\n      style: {\n        fill: '#F4A460'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"path\", {\n      fill: \"#FFEBCD\",\n      d: \"M0,0H8v1H0zm0,2H8v1H0zm0 2H8v1H0zm0,2H8v1H0zM1,0V8h1V0zm2,0V8h1V0zm2 0V8h1V0zm2,0V8h1V0z\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), [].concat.apply([], board), activeCell, React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"16\",\n      height: \"16\",\n      fillOpacity: \"0.1\",\n      onClick: e => this._handleBoardClick(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"colorofChess\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, players))));\n  }\n\n  componentDidMount() {\n    const room = this.props.room;\n    const channel = pusher.subscribe(\"game-\".concat(room));\n    channel.bind('board-updated', () => {\n      this._refreshGame();\n    });\n\n    this._refreshGame();\n  }\n\n  componentWillUnmount() {\n    const room = this.props.room;\n    pusher.unsubscribe(\"game-\".concat(room));\n  }\n\n  _handleBoardClick(e) {\n    const dim = e.target.getBoundingClientRect();\n    const x = e.clientX - dim.left;\n    const y = e.clientY - dim.top;\n    const cellX = Math.floor(x / 200 * 8);\n    const cellY = Math.floor(y / 200 * 8);\n\n    if (this.state.activeCell) {\n      if (this.state.activeCell.x === cellX && this.state.activeCell.y === cellY) {\n        this.setState({\n          activeCell: null\n        });\n      } else {\n        axios.request({\n          method: 'POST',\n          url: 'http://localhost:5000/api/games/' + this.props.room,\n          data: {\n            player: this.props.user.id,\n            fromRow: this.state.activeCell.y,\n            fromColumn: this.state.activeCell.x,\n            toRow: cellY,\n            toColumn: cellX\n          }\n        });\n        this.setState({\n          activeCell: null\n        });\n      }\n    } else {\n      this.setState({\n        activeCell: {\n          x: cellX,\n          y: cellY\n        }\n      });\n    }\n  }\n\n  _refreshGame() {\n    axios.request({\n      url: 'http://localhost:5000/api/games/' + this.props.room\n    }).then(response => {\n      this.setState({\n        board: response.data.board,\n        players: response.data.players\n      });\n    });\n  }\n\n  getPlayers() {\n    return Object.keys(this.state.players);\n  }\n\n} // import React from 'react';\n// import axios from 'axios';\n// import { Grid, List } from 'semantic-ui-react';\n// import Pusher from 'pusher-js';\n//     var pusher = new Pusher( \"4c266cab29bd293c0092\", {\n//         cluster: \"eu\",\n//         forceTLS: true\n//     });\n// const PIECES = {\n//     'WK': '♔',\n//     'WQ': '♕',\n//     'WR': '♖',\n//     'WB': '♗',\n//     'WN': '♘',\n//     'WP': '♙',\n//     'BK': '♚',\n//     'BQ': '♛',\n//     'BR': '♜',\n//     'BB': '♝',\n//     'BN': '♞',\n//     'BP': '♟'\n// }\n// export default class GameBoard extends React.Component {\n//     state = {\n//         board: [],\n//         players: {}\n//     };\n//     componentDidMount() {\n//         const room = this.props.room;\n//         const channel = pusher.subscribe(`game-${room}`);\n//         channel.bind('board-updated', () => {\n//             this._refreshGame();\n//         });\n//         this._refreshGame();\n//     }\n//     componentWillUnmount() {\n//         const room = this.props.room;\n//         pusher.unsubscribe(`game-${room}`);\n//     }\n//     render() {\n//         const board = this.state.board\n//             .map((row, rowIndex) => {\n//                 return row.map((piece, columnIndex) => {\n//                     const pieceSymbol = PIECES[piece];\n//                     if (pieceSymbol) {\n//                         return <text key={rowIndex + '-' + columnIndex} x={columnIndex} y={rowIndex + 0.8} style={{font: '1px sans-serif'}}>{pieceSymbol}</text>\n//                     }\n//                     return undefined;\n//                 }).filter((value) => value);\n//             });\n//         let activeCell;\n//         if (this.state.activeCell) {\n//             activeCell = <rect x={this.state.activeCell.x} y={this.state.activeCell.y} width=\"1\" height=\"1\" fillOpacity=\"0.5\" fill=\"#F00\" />\n//         }\n//         const players = Object.keys(this.state.players).map((player) => {\n//             const color = this.state.players[player];\n//             return (\n//                 <List.Item>\n//                     <List.Header>{ color }</List.Header>\n//                     { player }\n//                 </List.Item>\n//             );\n//         });\n//         return (\n//             <Grid>\n//                 <Grid.Row columns={2}>\n//                     <Grid.Column>\n//                         <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\" viewBox=\"-.05 -.05 8.1 8.1\">\n//                             <rect x=\"-.5\" y=\"-.5\" width=\"9\" height=\"9\" style={{fill: '#F4A460'}} />\n//                             <path fill=\"#FFEBCD\" d=\"M0,0H8v1H0zm0,2H8v1H0zm0\n//                             2H8v1H0zm0,2H8v1H0zM1,0V8h1V0zm2,0V8h1V0zm2\n//                             0V8h1V0zm2,0V8h1V0z\"/>\n//                             { [].concat.apply([], board) }\n//                             { activeCell }\n//                             <rect x=\"0\" y=\"0\" width=\"8\" height=\"8\" fillOpacity=\"0.1\" onClick={(e) => this._handleBoardClick(e)} />\n//                         </svg>\n//                     </Grid.Column>\n//                     <Grid.Column>\n//                         <List>\n//                             { players }\n//                         </List>\n//                     </Grid.Column>\n//                 </Grid.Row>\n//             </Grid>\n//         );\n//     }\n//     _handleBoardClick(e) {\n//         const dim = e.target.getBoundingClientRect();\n//         const x = e.clientX - dim.left;\n//         const y = e.clientY - dim.top;\n//         const cellX = Math.floor((x / 200) * 8);\n//         const cellY = Math.floor((y / 200) * 8);\n//         if (this.state.activeCell) {\n//             if (this.state.activeCell.x === cellX && this.state.activeCell.y === cellY) {\n//                 this.setState({\n//                     activeCell: null\n//                 });\n//             } else {\n//                 axios.request({\n//                     method: 'POST',\n//                     url: `${process.env.REACT_APP_API}/games/` + this.props.room,\n//                     data: {\n//                         player: this.props.user.id,\n//                         fromRow: this.state.activeCell.y,\n//                         fromColumn: this.state.activeCell.x,\n//                         toRow: cellY,\n//                         toColumn: cellX\n//                     }\n//                 });\n//                 this.setState({\n//                     activeCell: null\n//                 });\n//             }\n//         } else {\n//             this.setState({\n//                 activeCell: {\n//                     x: cellX,\n//                     y: cellY\n//                 }\n//             });\n//         }\n//     }\n//     _refreshGame() {\n//         axios.request({\n//             url: `${process.env.REACT_APP_API}/games/` + this.props.room\n//         })\n//         .then((response) => {\n//             this.setState({\n//                 board: response.data.board,\n//                 players: response.data.players\n//             });\n//         });\n//     }\n// }","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/GameBoard.jsx"],"names":["React","axios","Grid","List","Pusher","pusher","cluster","forceTLS","PIECES","GameBoard","Component","state","board","players","render","map","row","rowIndex","piece","columnIndex","pieceSymbol","font","undefined","filter","value","activeCell","x","y","Object","keys","player","color","fill","concat","apply","e","_handleBoardClick","componentDidMount","room","props","channel","subscribe","bind","_refreshGame","componentWillUnmount","unsubscribe","dim","target","getBoundingClientRect","clientX","left","clientY","top","cellX","Math","floor","cellY","setState","request","method","url","data","user","id","fromRow","fromColumn","toRow","toColumn","then","response","getPlayers"],"mappings":"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":["import React from 'react';\nimport axios from 'axios';\nimport { Grid, List } from 'semantic-ui-react';\nimport Pusher from 'pusher-js';\nimport \"./GameBoard.css\"\n\nvar pusher = new Pusher( \"4c266cab29bd293c0092\", {\n            cluster: \"eu\",\n            forceTLS: true\n        });\n\nconst PIECES = {\n    'WK': '♔',\n    'WQ': '♕',\n    'WR': '♖',\n    'WB': '♗',\n    'WN': '♘',\n    'WP': '♙',\n    'BK': '♚',\n    'BQ': '♛',\n    'BR': '♜',\n    'BB': '♝',\n    'BN': '♞',\n    'BP': '♟'\n}\n\nexport default class GameBoard extends React.Component {\n    state = {\n        board: [],\n        players: {}\n    };\n\n    render() {\n        const board = this.state.board\n            .map((row, rowIndex) => {\n                return row.map((piece, columnIndex) => {\n                    const pieceSymbol = PIECES[piece];\n                    if (pieceSymbol) {\n                        return <text key={rowIndex + '-' + columnIndex} x={columnIndex} y={rowIndex + 0.8} style={{font: '1px sans-serif'}}>{pieceSymbol}</text>\n                    }\n                    return undefined;\n                }).filter((value) => value);\n            });\n\n        let activeCell;\n        if (this.state.activeCell) {\n            activeCell = <rect x={this.state.activeCell.x} y={this.state.activeCell.y} width=\"1\" height=\"1\" fillOpacity=\"0.5\" fill=\"#F00\" />\n        }\n\n        const players = Object.keys(this.state.players).map((player) => {\n            const color = this.state.players[player];\n            return (\n                <List.Item>\n                    <List.Header>{ color }</List.Header>\n                    { player }\n                </List.Item>\n            );\n        });\n\n        return (\n            <Grid>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"500\" viewBox=\"-.5 -.10 8.1 8.1\">\n                            <rect x=\"0\" y=\"0\" width=\"18\" height=\"18\" style={{fill: '#F4A460'}} />\n                            <path fill=\"#FFEBCD\" d=\"M0,0H8v1H0zm0,2H8v1H0zm0\n                            2H8v1H0zm0,2H8v1H0zM1,0V8h1V0zm2,0V8h1V0zm2\n                            0V8h1V0zm2,0V8h1V0z\"/>\n\n                            { [].concat.apply([], board) }\n\n                            { activeCell }\n                            <rect x=\"0\" y=\"0\" width=\"16\" height=\"16\" fillOpacity=\"0.1\" onClick={(e) => this._handleBoardClick(e)} />\n                        </svg>\n                    </Grid.Column>\n                    <div className=\"colorofChess\">\n                        <List>\n                            { players }\n                        </List>\n                    </div>\n                </Grid.Row>\n            </Grid>\n        );\n    }\n\n    componentDidMount() {\n        const room = this.props.room;\n\n        const channel = pusher.subscribe(`game-${room}`);\n        channel.bind('board-updated', () => {\n            this._refreshGame();\n        });\n        this._refreshGame();\n    }\n\n    componentWillUnmount() {\n        const room = this.props.room;\n\n        pusher.unsubscribe(`game-${room}`);\n    }\n\n    _handleBoardClick(e) {\n        const dim = e.target.getBoundingClientRect();\n        const x = e.clientX - dim.left;\n        const y = e.clientY - dim.top;\n\n        const cellX = Math.floor((x / 200) * 8);\n        const cellY = Math.floor((y / 200) * 8);\n\n        if (this.state.activeCell) {\n            if (this.state.activeCell.x === cellX && this.state.activeCell.y === cellY) {\n                this.setState({\n                    activeCell: null\n                });\n            } else {\n                axios.request({\n                    method: 'POST',\n                    url: 'http://localhost:5000/api/games/' + this.props.room,\n                    data: {\n                        player: this.props.user.id,\n                        fromRow: this.state.activeCell.y,\n                        fromColumn: this.state.activeCell.x,\n                        toRow: cellY,\n                        toColumn: cellX\n                    }\n                });\n                this.setState({\n                    activeCell: null\n                });\n            }\n        } else {\n            this.setState({\n                activeCell: {\n                    x: cellX,\n                    y: cellY\n                }\n            });\n        }\n    }\n\n    _refreshGame() {\n        axios.request({\n            url: 'http://localhost:5000/api/games/' + this.props.room\n        })\n        .then((response) => {\n            this.setState({\n                board: response.data.board,\n                players: response.data.players\n            });\n        });\n    }\n\n    getPlayers() {\n        return Object.keys(this.state.players);\n    }\n}\n// import React from 'react';\n// import axios from 'axios';\n// import { Grid, List } from 'semantic-ui-react';\n// import Pusher from 'pusher-js';\n//     var pusher = new Pusher( \"4c266cab29bd293c0092\", {\n//         cluster: \"eu\",\n//         forceTLS: true\n//     });\n// const PIECES = {\n//     'WK': '♔',\n//     'WQ': '♕',\n//     'WR': '♖',\n//     'WB': '♗',\n//     'WN': '♘',\n//     'WP': '♙',\n//     'BK': '♚',\n//     'BQ': '♛',\n//     'BR': '♜',\n//     'BB': '♝',\n//     'BN': '♞',\n//     'BP': '♟'\n// }\n// export default class GameBoard extends React.Component {\n//     state = {\n//         board: [],\n//         players: {}\n//     };\n\n//     componentDidMount() {\n//         const room = this.props.room;\n//         const channel = pusher.subscribe(`game-${room}`);\n//         channel.bind('board-updated', () => {\n//             this._refreshGame();\n//         });\n//         this._refreshGame();\n//     }\n\n//     componentWillUnmount() {\n//         const room = this.props.room;\n//         pusher.unsubscribe(`game-${room}`);\n//     }\n\n//     render() {\n//         const board = this.state.board\n//             .map((row, rowIndex) => {\n//                 return row.map((piece, columnIndex) => {\n//                     const pieceSymbol = PIECES[piece];\n//                     if (pieceSymbol) {\n//                         return <text key={rowIndex + '-' + columnIndex} x={columnIndex} y={rowIndex + 0.8} style={{font: '1px sans-serif'}}>{pieceSymbol}</text>\n//                     }\n//                     return undefined;\n//                 }).filter((value) => value);\n//             });\n//         let activeCell;\n//         if (this.state.activeCell) {\n//             activeCell = <rect x={this.state.activeCell.x} y={this.state.activeCell.y} width=\"1\" height=\"1\" fillOpacity=\"0.5\" fill=\"#F00\" />\n//         }\n//         const players = Object.keys(this.state.players).map((player) => {\n//             const color = this.state.players[player];\n//             return (\n//                 <List.Item>\n//                     <List.Header>{ color }</List.Header>\n//                     { player }\n//                 </List.Item>\n//             );\n//         });\n//         return (\n//             <Grid>\n//                 <Grid.Row columns={2}>\n//                     <Grid.Column>\n//                         <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\" viewBox=\"-.05 -.05 8.1 8.1\">\n//                             <rect x=\"-.5\" y=\"-.5\" width=\"9\" height=\"9\" style={{fill: '#F4A460'}} />\n//                             <path fill=\"#FFEBCD\" d=\"M0,0H8v1H0zm0,2H8v1H0zm0\n//                             2H8v1H0zm0,2H8v1H0zM1,0V8h1V0zm2,0V8h1V0zm2\n//                             0V8h1V0zm2,0V8h1V0z\"/>\n//                             { [].concat.apply([], board) }\n//                             { activeCell }\n//                             <rect x=\"0\" y=\"0\" width=\"8\" height=\"8\" fillOpacity=\"0.1\" onClick={(e) => this._handleBoardClick(e)} />\n//                         </svg>\n//                     </Grid.Column>\n//                     <Grid.Column>\n//                         <List>\n//                             { players }\n//                         </List>\n//                     </Grid.Column>\n//                 </Grid.Row>\n//             </Grid>\n//         );\n//     }\n  \n//     _handleBoardClick(e) {\n//         const dim = e.target.getBoundingClientRect();\n//         const x = e.clientX - dim.left;\n//         const y = e.clientY - dim.top;\n//         const cellX = Math.floor((x / 200) * 8);\n//         const cellY = Math.floor((y / 200) * 8);\n//         if (this.state.activeCell) {\n//             if (this.state.activeCell.x === cellX && this.state.activeCell.y === cellY) {\n//                 this.setState({\n//                     activeCell: null\n//                 });\n//             } else {\n//                 axios.request({\n//                     method: 'POST',\n//                     url: `${process.env.REACT_APP_API}/games/` + this.props.room,\n//                     data: {\n//                         player: this.props.user.id,\n//                         fromRow: this.state.activeCell.y,\n//                         fromColumn: this.state.activeCell.x,\n//                         toRow: cellY,\n//                         toColumn: cellX\n//                     }\n//                 });\n//                 this.setState({\n//                     activeCell: null\n//                 });\n//             }\n//         } else {\n//             this.setState({\n//                 activeCell: {\n//                     x: cellX,\n//                     y: cellY\n//                 }\n//             });\n//         }\n//     }\n//     _refreshGame() {\n//         axios.request({\n//             url: `${process.env.REACT_APP_API}/games/` + this.props.room\n//         })\n//         .then((response) => {\n//             this.setState({\n//                 board: response.data.board,\n//                 players: response.data.players\n//             });\n//         });\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}