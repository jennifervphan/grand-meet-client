{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/Chat.jsx\";\nimport React from 'react';\nimport { Grid, List, Comment, Form, Input } from 'semantic-ui-react';\nimport GameBoard from './GameBoard';\nexport default class Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: props.room.users,\n      messages: [],\n      newMessage: ''\n    };\n    props.user.subscribeToRoom({\n      roomId: props.room.id,\n      messageLimit: 100,\n      hooks: {\n        onUserJoined: user => {\n          this.setState({\n            users: props.room.users\n          });\n        },\n        onUserLeft: user => {\n          this.setState({\n            users: props.room.users\n          });\n        },\n        onNewMessage: message => {\n          const messages = this.state.messages;\n          let opponent;\n\n          if (message.attachment && message.attachment.link && message.attachment.link.startsWith('urn:player:')) {\n            opponent = message.attachment.link.substring(11);\n\n            if (opponent !== props.user.id) {\n              opponent = undefined;\n            }\n          }\n\n          messages.push({\n            id: message.id,\n            user: message.senderId,\n            message: message.text,\n            opponent: opponent\n          });\n          this.setState({\n            messages: messages\n          });\n        }\n      }\n    });\n  }\n\n  _challengePlayer(player) {\n    const _this$props = this.props,\n          user = _this$props.user,\n          room = _this$props.room;\n    user.sendMessage({\n      text: \"I challenge \".concat(player.name, \" to a game\"),\n      roomId: room.id,\n      attachment: {\n        link: \"urn:player:\".concat(player.id),\n        type: 'file',\n        fetchRequired: false\n      }\n    });\n  }\n\n  _acceptChallenge(player) {\n    const user = this.props.user;\n    user.createRoom({\n      name: \"\".concat(user.id, \" vs \").concat(player),\n      addUserIds: [player]\n    }).then(room => {\n      this.props.startedGame(room.id, user.id, player);\n    });\n  }\n\n  render() {\n    const users = this.state.users.filter(user => user.id !== this.props.user.id).map(user => React.createElement(List.Item, {\n      key: user.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(List.Content, {\n      floated: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: () => this._challengePlayer(user),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Challenge\")), React.createElement(List.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, user.name)));\n    const messages = this.state.messages.map(message => {\n      let acceptGame;\n\n      if (message.opponent) {\n        acceptGame = React.createElement(Comment.Actions, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(Comment.Action, {\n          onClick: () => this._acceptChallenge(message.user),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, \"Accept Challenge\"));\n      }\n\n      return React.createElement(Comment, {\n        key: message.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Comment.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Comment.Author, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, message.user), React.createElement(Comment.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, message.message), acceptGame));\n    });\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.props.game && React.createElement(GameBoard, {\n      room: this.props.game,\n      user: this.props.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(Comment.Group, {\n      style: {\n        height: '20em',\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, messages), React.createElement(\"div\", {\n      style: {\n        float: \"left\",\n        clear: \"both\"\n      },\n      ref: el => {\n        this.messagesEnd = el;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(List, {\n      style: {\n        maxHeight: '20em',\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(List.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.props.user.name)), users))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this._handleSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Input, {\n      action: \"Post\",\n      placeholder: \"New Message...\",\n      value: this.state.newMessage,\n      fluid: true,\n      autoFocus: true,\n      onChange: this._handleNewMessageChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })))));\n  }\n\n  componentDidMount() {\n    this._scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this._scrollToBottom();\n  }\n\n  _scrollToBottom() {\n    this.messagesEnd.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }\n\n  _handleNewMessageChange(e) {\n    this.setState({\n      newMessage: e.target.value\n    });\n  }\n\n  _handleSubmit() {\n    const newMessage = this.state.newMessage;\n    const _this$props2 = this.props,\n          user = _this$props2.user,\n          room = _this$props2.room;\n    user.sendMessage({\n      text: newMessage,\n      roomId: room.id\n    });\n    this.setState({\n      newMessage: ''\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/Chat.jsx"],"names":["React","Grid","List","Comment","Form","Input","GameBoard","Chat","Component","constructor","props","state","users","room","messages","newMessage","user","subscribeToRoom","roomId","id","messageLimit","hooks","onUserJoined","setState","onUserLeft","onNewMessage","message","opponent","attachment","link","startsWith","substring","undefined","push","senderId","text","_challengePlayer","player","sendMessage","name","type","fetchRequired","_acceptChallenge","createRoom","addUserIds","then","startedGame","render","filter","map","acceptGame","game","height","overflow","float","clear","el","messagesEnd","maxHeight","_handleSubmit","bind","_handleNewMessageChange","componentDidMount","_scrollToBottom","componentDidUpdate","scrollIntoView","behavior","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\n    import { Grid, List, Comment, Form, Input } from 'semantic-ui-react';\n    import GameBoard from './GameBoard';\n\n    export default class Chat extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                users: props.room.users,\n                messages: [],\n                newMessage: ''\n            };\n            props.user.subscribeToRoom({\n                roomId: props.room.id,\n                messageLimit: 100,\n                hooks: {\n                    onUserJoined: (user) => {\n                        this.setState({\n                            users: props.room.users\n                        });\n                    },\n                    onUserLeft: (user) => {\n                        this.setState({\n                            users: props.room.users\n                        });\n                    },\n                    onNewMessage: (message) => {\n                        const messages = this.state.messages;\n                        let opponent;\n                        if (message.attachment && message.attachment.link && message.attachment.link.startsWith('urn:player:')) {\n                            opponent = message.attachment.link.substring(11);\n                            if (opponent !== props.user.id) {\n                                opponent = undefined;\n                            }\n                        }\n                        messages.push({\n                            id: message.id,\n                            user: message.senderId,\n                            message: message.text,\n                            opponent: opponent\n                        });\n                        this.setState({\n                            messages: messages\n                        });\n                    }\n                }\n            })\n        }\n        _challengePlayer(player) {\n            const { user, room } = this.props;\n            user.sendMessage({\n                text: `I challenge ${player.name} to a game`,\n                roomId: room.id,\n                attachment: {\n                    link: `urn:player:${player.id}`,\n                    type: 'file',\n                    fetchRequired: false\n                }\n            });\n        }\n        \n        _acceptChallenge(player) {\n            const { user } = this.props;\n            user.createRoom({\n                name: `${user.id} vs ${player}`,\n                addUserIds: [player]\n            }).then((room) => {\n                this.props.startedGame(room.id, user.id, player);\n            });\n        }\n\n        render() {\n            const users = this.state.users\n            .filter((user) => user.id !== this.props.user.id)\n            .map((user) => (\n                <List.Item key={user.id}>\n                    <List.Content floated='right'>\n                        <a onClick={() => this._challengePlayer(user)}>Challenge</a>\n                    </List.Content>\n                    <List.Content>\n                        { user.name }\n                    </List.Content>\n                </List.Item>\n            ));\n            const messages = this.state.messages\n            .map((message) => {\n                let acceptGame;\n                if (message.opponent) {\n                    acceptGame = (\n                        <Comment.Actions>\n                            <Comment.Action onClick={() => this._acceptChallenge(message.user)}>Accept Challenge</Comment.Action>\n                        </Comment.Actions>\n                    );\n                }\n                return (\n                    <Comment key={message.id}>\n                        <Comment.Content>\n                            <Comment.Author>{ message.user }</Comment.Author>\n                            <Comment.Text>{ message.message }</Comment.Text>\n                            { acceptGame }\n                        </Comment.Content>\n                    </Comment>\n                );\n            });\n            return (\n                <Grid>\n                    <Grid.Row>\n                    <Grid.Column width={12}>\n                        { this.props.game && <GameBoard room={this.props.game} user={this.props.user} /> }\n                        <Comment.Group style={{height: '20em', overflow: 'auto'}}>\n                            { messages }\n                        </Comment.Group>\n                        <div style={{ float:\"left\", clear: \"both\" }} ref={(el) => { this.messagesEnd = el; }} />\n                    </Grid.Column>\n                        <Grid.Column width={4}>\n                            <List style={{maxHeight: '20em', overflow: 'auto'}}>\n                                <List.Item>\n                                    <b>\n                                        { this.props.user.name }\n                                    </b>\n                                </List.Item>\n                                { users }\n                            </List>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column width={16}>\n                            <Form onSubmit={this._handleSubmit.bind(this)}>\n                                <Input action='Post'\n                                       placeholder='New Message...'\n                                       value={this.state.newMessage}\n                                       fluid\n                                       autoFocus\n                                       onChange={this._handleNewMessageChange.bind(this)} />\n                            </Form>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            );\n        }\n        componentDidMount() {\n            this._scrollToBottom();\n        }\n        componentDidUpdate() {\n            this._scrollToBottom();\n        }\n        _scrollToBottom() {\n            this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n        }\n        _handleNewMessageChange(e) {\n            this.setState({\n                newMessage: e.target.value\n            });\n        }\n        _handleSubmit() {\n            const { newMessage } = this.state;\n            const { user, room } = this.props;\n            user.sendMessage({\n                text: newMessage,\n                roomId: room.id\n            });\n            this.setState({\n                newMessage: ''\n            });\n        }\n    }"]},"metadata":{},"sourceType":"module"}