{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/message/AllRooms.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { TokenProvider, ChatManager } from '@pusher/chatkit-client';\nimport axios from 'axios';\nimport './AllRooms.css';\nexport default class AllRooms extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: JSON.parse(localStorage.getItem('user')),\n      otherUsers: JSON.parse(localStorage.getItem('nearbyUsers')) // currentRoom:this.props.currentRoom\n\n    };\n  }\n\n  componentDidUpdate() {}\n\n  componentDidMount() {\n    axios.get(\"\".concat(process.env.REACT_APP_API, \"/inbox\"), {\n      withCredentials: true\n    }).then(response => {\n      let chatRooms = response.data;\n      this.setState({\n        chatRooms: chatRooms\n      });\n    });\n    const chatManager = new ChatManager({\n      instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n      userId: this.state.user.username,\n      tokenProvider: new TokenProvider({\n        url: \"\".concat(process.env.REACT_APP_API, \"/authenticate\")\n      })\n    });\n    chatManager.connect({\n      onRoomUpdated: room => {\n        const chatRooms = this.state.chatRooms;\n        const index = chatRooms.findIndex(r => r.id === room.id);\n        chatRooms[index] = room;\n        this.setState({\n          chatRooms\n        });\n      }\n    }).then().catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    const rooms = this.state.rooms;\n\n    if (rooms) {\n      let eachRoom = rooms.map((room, index) => {\n        let roomName = room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0];\n        let partner = this.state.otherUsers.filter(user => user.username === roomName)[0];\n        const isRoomActive = room.id === this.props.currentRoom.id ? 'active' : '';\n        debugger;\n        return React.createElement(Link, {\n          className: \"eachRoom\",\n          to: \"/inbox/\".concat(room.id),\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          className: isRoomActive,\n          key: room.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"inboxList\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"eachMesDiv\",\n          style: {\n            backgroundImage: \"url(\".concat(partner.profilePicUrl, \")\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }), roomName, room.unreadCount > 0 ? React.createElement(\"span\", {\n          className: \"room-unread\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, room.unreadCount) : null)));\n      });\n      return React.createElement(\"ul\", {\n        className: \"roomsTab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, eachRoom);\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"No messages, search for nearby user to chat with!\");\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/final project/grandmeet-client/src/components/message/AllRooms.jsx"],"names":["React","Component","Link","TokenProvider","ChatManager","axios","AllRooms","constructor","props","state","user","JSON","parse","localStorage","getItem","otherUsers","componentDidUpdate","componentDidMount","get","process","env","REACT_APP_API","withCredentials","then","response","chatRooms","data","setState","chatManager","instanceLocator","REACT_APP_chatkit_instance_locator","userId","username","tokenProvider","url","connect","onRoomUpdated","room","index","findIndex","r","id","catch","err","console","log","render","rooms","eachRoom","map","roomName","filter","partner","isRoomActive","currentRoom","backgroundImage","profilePicUrl","unreadCount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Link} from 'react-router-dom';\nimport { TokenProvider, ChatManager } from '@pusher/chatkit-client';\nimport axios from 'axios';\nimport './AllRooms.css';\n\nexport default class AllRooms extends Component {\n    constructor (props){\n        super(props);\n        this.state={\n            user: JSON.parse(localStorage.getItem('user')),\n            otherUsers:JSON.parse(localStorage.getItem('nearbyUsers')),\n            // currentRoom:this.props.currentRoom\n        }\n    }\n\n    componentDidUpdate(){\n       \n    }\n\n    componentDidMount(){\n        axios.get(`${process.env.REACT_APP_API}/inbox`, \n                    {withCredentials:true})\n        .then(response => {\n            let chatRooms= response.data;\n            this.setState({chatRooms:chatRooms})\n            })\n\n            const chatManager = new ChatManager({\n            instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n            userId: this.state.user.username,\n            tokenProvider: new TokenProvider({\n            url: `${process.env.REACT_APP_API}/authenticate`\n            })\n            });\n\n        chatManager\n        .connect({\n            onRoomUpdated: room => {\n            const { chatRooms } = this.state;\n            const index = chatRooms.findIndex(r => r.id === room.id);\n            chatRooms[index] = room;\n            this.setState({\n            chatRooms\n            });\n            }})\n        .then()\n        .catch(err=>{\n        console.log(err)\n        })\n    }\n\n\n    render() {\n        const {rooms} =this.state\n        if(rooms){\n            let eachRoom= rooms.map((room, index)=>{\n                        let roomName= room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0]\n                        let partner= this.state.otherUsers.filter(user => user.username=== roomName)[0]\n                        const isRoomActive = room.id === this.props.currentRoom.id ? 'active' : '';   \n                        debugger\n                        return(\n                            <Link className=\"eachRoom\" to={`/inbox/${room.id}`} key={index}>\n                            <li className={isRoomActive} key={room.id}>\n                                <div className=\"inboxList\">\n                                <div className=\"eachMesDiv\" style={{backgroundImage: `url(${partner.profilePicUrl})`}}>\n                                </div>\n                                {roomName}\n                                {room.unreadCount > 0 ? (\n                                    <span className=\"room-unread\">{room.unreadCount}</span>\n                                ): null\n                                }\n                                </div>\n                            </li>\n                            </Link>\n                        )\n                    })\n                    return (\n                        <ul className=\"roomsTab\">\n                        {eachRoom}   \n                        </ul>\n                    )\n        } else{\n            return(\n                <div>\n                    No messages, search for nearby user to chat with!\n                </div>\n            )\n        }\n        \n    }\n}\n"]},"metadata":{},"sourceType":"module"}