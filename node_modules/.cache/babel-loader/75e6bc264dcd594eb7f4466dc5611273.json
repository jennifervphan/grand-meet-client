{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/AllRooms.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport axios from 'axios';\nimport './AllRooms.css';\nexport default class AllRooms extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: JSON.parse(localStorage.getItem('user')),\n      otherUsers: {},\n      rooms: this.props.rooms\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"\".concat(process.env.REACT_APP_API, \"/nearby\"), {\n      withCredentials: true\n    }).then(response => {\n      const chatManager = new ChatManager({\n        instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n        userId: this.state.user.username,\n        tokenProvider: new TokenProvider({\n          url: \"\".concat(process.env.REACT_APP_API, \"/authenticate\")\n        })\n      });\n      chatManager.connect({\n        onRoomUpdated: room => {\n          const rooms = this.state.rooms.rooms;\n          const index = rooms.findIndex(r => r.id === room.id);\n          rooms[index] = room;\n          this.setState({\n            rooms,\n            otherUsers: response.data\n          });\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    if (this.state.otherUsers) {\n      const rooms = this.props.rooms;\n      let eachRoom = rooms.map((room, index) => {\n        let roomName = room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0];\n        let partner = this.state.otherUsers.filter(user => user.username === roomName)[0];\n        const isRoomActive = room.id === this.props.currentRoom.id ? 'active' : '';\n        debugger;\n        return React.createElement(Link, {\n          className: \"eachRoom\",\n          to: \"/inbox/\".concat(room.id),\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          className: isRoomActive,\n          key: room.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"inboxList\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"eachMesDiv\",\n          style: {\n            backgroundImage: \"url(\".concat(partner.profilePicUrl, \")\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }), roomName, room.unreadCount > 0 ? React.createElement(\"span\", {\n          className: \"room-unread\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, room.unreadCount) : null)));\n      });\n      return React.createElement(\"ul\", {\n        className: \"roomsTab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, eachRoom);\n    } else {\n      return React.createElement(\"ul\", {\n        className: \"roomsTab\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/message/AllRooms.jsx"],"names":["React","Component","Link","ChatManager","TokenProvider","axios","AllRooms","constructor","props","state","user","JSON","parse","localStorage","getItem","otherUsers","rooms","componentDidMount","get","process","env","REACT_APP_API","withCredentials","then","response","chatManager","instanceLocator","REACT_APP_chatkit_instance_locator","userId","username","tokenProvider","url","connect","onRoomUpdated","room","index","findIndex","r","id","setState","data","catch","err","console","log","render","eachRoom","map","roomName","filter","partner","isRoomActive","currentRoom","backgroundImage","profilePicUrl","unreadCount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Link} from 'react-router-dom';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport axios from 'axios';\nimport './AllRooms.css';\n\nexport default class AllRooms extends Component {\n    constructor (props){\n        super(props);\n        this.state={\n            user: JSON.parse(localStorage.getItem('user')),\n            otherUsers:{},\n            rooms: this.props.rooms\n        }\n    }\n\n    componentDidMount(){\n            axios.get(`${process.env.REACT_APP_API}/nearby`,\n                         {withCredentials:true})\n            .then(response=>{\n                 const chatManager = new ChatManager({\n                    instanceLocator: process.env.REACT_APP_chatkit_instance_locator,\n                    userId: this.state.user.username,\n                    tokenProvider: new TokenProvider({\n                        url: `${process.env.REACT_APP_API}/authenticate`\n                    })\n                })\n        \n                chatManager\n                        .connect({onRoomUpdated: room => {\n                            const { rooms } = this.state.rooms;\n                            const index = rooms.findIndex(r => r.id === room.id);\n                            rooms[index] = room;\n                            this.setState({\n                              rooms,\n                              otherUsers:response.data\n                            });\n                          }})\n             })\n            .catch(err=>{\n            console.log(err)\n            })\n    }\n\n\n    render() {\n        if(this.state.otherUsers){\n             const {rooms} =this.props\n        let eachRoom= rooms.map((room, index)=>{\n            let roomName= room[\"member_user_ids\"].filter(id => id !== this.state.user.username)[0]\n            let partner= this.state.otherUsers.filter(user => user.username=== roomName)[0]\n            const isRoomActive = room.id === this.props.currentRoom.id ? 'active' : '';   \n            debugger\n            return(\n                <Link className=\"eachRoom\" to={`/inbox/${room.id}`} key={index}>\n                <li className={isRoomActive} key={room.id}>\n                    <div className=\"inboxList\">\n                    <div className=\"eachMesDiv\" style={{backgroundImage: `url(${partner.profilePicUrl})`}}>\n                    </div>\n                    {roomName}\n                    {room.unreadCount > 0 ? (\n                        <span className=\"room-unread\">{room.unreadCount}</span>\n                    ): null}\n                    </div>\n                </li>\n                </Link>\n            )\n        })\n        return (\n            <ul className=\"roomsTab\">\n             {eachRoom}   \n            </ul>\n        )\n        }\n\n        else {\n            return (\n                <ul className=\"roomsTab\">\n                    Loading...\n                </ul>\n            )\n        }\n       \n    }\n}\n"]},"metadata":{},"sourceType":"module"}