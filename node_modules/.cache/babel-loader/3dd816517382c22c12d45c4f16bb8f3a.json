{"ast":null,"code":"var _jsxFileName = \"/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/GameBoard.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Grid, List } from 'semantic-ui-react';\nimport Pusher from 'pusher-js';\nvar pusher = new Pusher(\"4c266cab29bd293c0092\", {\n  cluster: \"eu\",\n  forceTLS: true\n});\nconst PIECES = {\n  'WK': '♔',\n  'WQ': '♕',\n  'WR': '♖',\n  'WB': '♗',\n  'WN': '♘',\n  'WP': '♙',\n  'BK': '♚',\n  'BQ': '♛',\n  'BR': '♜',\n  'BB': '♝',\n  'BN': '♞',\n  'BP': '♟'\n};\nexport default class GameBoard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      board: [],\n      players: {}\n    };\n  }\n\n  componentDidMount() {\n    const room = this.props.room;\n    const channel = pusher.subscribe(\"game-\".concat(room));\n    channel.bind('board-updated', () => {\n      this._refreshGame();\n    });\n\n    this._refreshGame();\n  }\n\n  componentWillUnmount() {\n    const room = this.props.room;\n    pusher.unsubscribe(\"game-\".concat(room));\n  }\n\n  render() {\n    const board = this.state.board.map((row, rowIndex) => {\n      return row.map((piece, columnIndex) => {\n        const pieceSymbol = PIECES[piece];\n\n        if (pieceSymbol) {\n          return React.createElement(\"text\", {\n            key: rowIndex + '-' + columnIndex,\n            x: columnIndex,\n            y: rowIndex + 0.8,\n            style: {\n              font: '1px sans-serif'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }, pieceSymbol);\n        }\n\n        return undefined;\n      }).filter(value => value);\n    });\n    let activeCell;\n\n    if (this.state.activeCell) {\n      activeCell = React.createElement(\"rect\", {\n        x: this.state.activeCell.x,\n        y: this.state.activeCell.y,\n        width: \"1\",\n        height: \"1\",\n        fillOpacity: \"0.5\",\n        fill: \"#F00\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n    }\n\n    const players = Object.keys(this.state.players).map(player => {\n      const color = this.state.players[player];\n      return React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(List.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, color), player);\n    });\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      width: \"200\",\n      height: \"200\",\n      viewBox: \"-.05 -.05 8.1 8.1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"rect\", {\n      x: \"-.5\",\n      y: \"-.5\",\n      width: \"9\",\n      height: \"9\",\n      style: {\n        fill: '#F4A460'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"path\", {\n      fill: \"#FFEBCD\",\n      d: \"M0,0H8v1H0zm0,2H8v1H0zm0 2H8v1H0zm0,2H8v1H0zM1,0V8h1V0zm2,0V8h1V0zm2 0V8h1V0zm2,0V8h1V0z\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), [].concat.apply([], board), activeCell, React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"8\",\n      height: \"8\",\n      fillOpacity: \"0.1\",\n      onClick: e => this._handleBoardClick(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, players))));\n  }\n\n  componentDidMount() {\n    this._refreshGame();\n  }\n\n  _handleBoardClick(e) {\n    const dim = e.target.getBoundingClientRect();\n    const x = e.clientX - dim.left;\n    const y = e.clientY - dim.top;\n    const cellX = Math.floor(x / 200 * 8);\n    const cellY = Math.floor(y / 200 * 8);\n\n    if (this.state.activeCell) {\n      if (this.state.activeCell.x === cellX && this.state.activeCell.y === cellY) {\n        this.setState({\n          activeCell: null\n        });\n      } else {\n        axios.request({\n          method: 'POST',\n          url: \"\".concat(process.env.REACT_APP_API, \"/games/\") + this.props.room,\n          data: {\n            player: this.props.user.id,\n            fromRow: this.state.activeCell.y,\n            fromColumn: this.state.activeCell.x,\n            toRow: cellY,\n            toColumn: cellX\n          }\n        });\n        this.setState({\n          activeCell: null\n        });\n      }\n    } else {\n      this.setState({\n        activeCell: {\n          x: cellX,\n          y: cellY\n        }\n      });\n    }\n  }\n\n  _refreshGame() {\n    axios.request({\n      url: \"\".concat(process.env.REACT_APP_API, \"/games/\") + this.props.room\n    }).then(response => {\n      this.setState({\n        board: response.data.board,\n        players: response.data.players\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/jennifervphan/Desktop/Code/labs/project3/grandMeet-client/src/components/share/GameBoard.jsx"],"names":["React","axios","Grid","List","Pusher","pusher","cluster","forceTLS","PIECES","GameBoard","Component","state","board","players","componentDidMount","room","props","channel","subscribe","bind","_refreshGame","componentWillUnmount","unsubscribe","render","map","row","rowIndex","piece","columnIndex","pieceSymbol","font","undefined","filter","value","activeCell","x","y","Object","keys","player","color","fill","concat","apply","e","_handleBoardClick","dim","target","getBoundingClientRect","clientX","left","clientY","top","cellX","Math","floor","cellY","setState","request","method","url","process","env","REACT_APP_API","data","user","id","fromRow","fromColumn","toRow","toColumn","then","response"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Grid, List } from 'semantic-ui-react';\nimport Pusher from 'pusher-js';\n    var pusher = new Pusher( \"4c266cab29bd293c0092\", {\n        cluster: \"eu\",\n        forceTLS: true\n    });\nconst PIECES = {\n    'WK': '♔',\n    'WQ': '♕',\n    'WR': '♖',\n    'WB': '♗',\n    'WN': '♘',\n    'WP': '♙',\n    'BK': '♚',\n    'BQ': '♛',\n    'BR': '♜',\n    'BB': '♝',\n    'BN': '♞',\n    'BP': '♟'\n}\nexport default class GameBoard extends React.Component {\n    state = {\n        board: [],\n        players: {}\n    };\n\n    componentDidMount() {\n        const room = this.props.room;\n        const channel = pusher.subscribe(`game-${room}`);\n        channel.bind('board-updated', () => {\n            this._refreshGame();\n        });\n        this._refreshGame();\n    }\n\n    componentWillUnmount() {\n        const room = this.props.room;\n        pusher.unsubscribe(`game-${room}`);\n    }\n\n    render() {\n        const board = this.state.board\n            .map((row, rowIndex) => {\n                return row.map((piece, columnIndex) => {\n                    const pieceSymbol = PIECES[piece];\n                    if (pieceSymbol) {\n                        return <text key={rowIndex + '-' + columnIndex} x={columnIndex} y={rowIndex + 0.8} style={{font: '1px sans-serif'}}>{pieceSymbol}</text>\n                    }\n                    return undefined;\n                }).filter((value) => value);\n            });\n        let activeCell;\n        if (this.state.activeCell) {\n            activeCell = <rect x={this.state.activeCell.x} y={this.state.activeCell.y} width=\"1\" height=\"1\" fillOpacity=\"0.5\" fill=\"#F00\" />\n        }\n        const players = Object.keys(this.state.players).map((player) => {\n            const color = this.state.players[player];\n            return (\n                <List.Item>\n                    <List.Header>{ color }</List.Header>\n                    { player }\n                </List.Item>\n            );\n        });\n        return (\n            <Grid>\n                <Grid.Row columns={2}>\n                    <Grid.Column>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\" viewBox=\"-.05 -.05 8.1 8.1\">\n                            <rect x=\"-.5\" y=\"-.5\" width=\"9\" height=\"9\" style={{fill: '#F4A460'}} />\n                            <path fill=\"#FFEBCD\" d=\"M0,0H8v1H0zm0,2H8v1H0zm0\n                            2H8v1H0zm0,2H8v1H0zM1,0V8h1V0zm2,0V8h1V0zm2\n                            0V8h1V0zm2,0V8h1V0z\"/>\n                            { [].concat.apply([], board) }\n                            { activeCell }\n                            <rect x=\"0\" y=\"0\" width=\"8\" height=\"8\" fillOpacity=\"0.1\" onClick={(e) => this._handleBoardClick(e)} />\n                        </svg>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <List>\n                            { players }\n                        </List>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        );\n    }\n    componentDidMount() {\n        this._refreshGame();\n    }\n    _handleBoardClick(e) {\n        const dim = e.target.getBoundingClientRect();\n        const x = e.clientX - dim.left;\n        const y = e.clientY - dim.top;\n        const cellX = Math.floor((x / 200) * 8);\n        const cellY = Math.floor((y / 200) * 8);\n        if (this.state.activeCell) {\n            if (this.state.activeCell.x === cellX && this.state.activeCell.y === cellY) {\n                this.setState({\n                    activeCell: null\n                });\n            } else {\n                axios.request({\n                    method: 'POST',\n                    url: `${process.env.REACT_APP_API}/games/` + this.props.room,\n                    data: {\n                        player: this.props.user.id,\n                        fromRow: this.state.activeCell.y,\n                        fromColumn: this.state.activeCell.x,\n                        toRow: cellY,\n                        toColumn: cellX\n                    }\n                });\n                this.setState({\n                    activeCell: null\n                });\n            }\n        } else {\n            this.setState({\n                activeCell: {\n                    x: cellX,\n                    y: cellY\n                }\n            });\n        }\n    }\n    _refreshGame() {\n        axios.request({\n            url: `${process.env.REACT_APP_API}/games/` + this.props.room\n        })\n        .then((response) => {\n            this.setState({\n                board: response.data.board,\n                players: response.data.players\n            });\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}